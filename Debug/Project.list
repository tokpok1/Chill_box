
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f68  08005f68  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f68  08005f68  00006f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f70  08005f70  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f70  08005f70  00006f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f74  08005f74  00006f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08005fd4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005fd4  00007318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bfc  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f1  00000000  00000000  00018c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  0001af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2b  00000000  00000000  0001c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225f7  00000000  00000000  0001cd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fc8  00000000  00000000  0003f382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e25  00000000  00000000  0005234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c16f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  0012c1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00130ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e88 	.word	0x08005e88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005e88 	.word	0x08005e88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <READ_BIN>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

inline extern uint8_t READ_BIN(uint8_t input, uint8_t position)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
	return (input & (1 << position)) >> position;
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	401a      	ands	r2, r3
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	fa42 f303 	asr.w	r3, r2, r3
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <read_buttons>:
	double rezult = m*x +(value_y_1-m*value_x_1);
    return rezult;
}

ButtonState read_buttons(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
		but_1 ^= (HAL_GPIO_ReadPin(BUT4_GPIO_Port, BUT4_Pin) == GPIO_PIN_RESET);
 80005a4:	2110      	movs	r1, #16
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005aa:	f002 f97b 	bl	80028a4 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	bf0c      	ite	eq
 80005b4:	2301      	moveq	r3, #1
 80005b6:	2300      	movne	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	b25a      	sxtb	r2, r3
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <read_buttons+0xc4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	4053      	eors	r3, r2
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <read_buttons+0xc4>)
 80005ca:	701a      	strb	r2, [r3, #0]
		but_2 ^= (HAL_GPIO_ReadPin(BUT5_GPIO_Port, BUT5_Pin) == GPIO_PIN_RESET);
 80005cc:	2120      	movs	r1, #32
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f002 f967 	bl	80028a4 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	b25a      	sxtb	r2, r3
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <read_buttons+0xc8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	4053      	eors	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <read_buttons+0xc8>)
 80005f2:	701a      	strb	r2, [r3, #0]
		but_3 ^= (HAL_GPIO_ReadPin(BUT6_GPIO_Port, BUT6_Pin) == GPIO_PIN_RESET);
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f002 f953 	bl	80028a4 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf0c      	ite	eq
 8000604:	2301      	moveq	r3, #1
 8000606:	2300      	movne	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	b25a      	sxtb	r2, r3
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <read_buttons+0xcc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4053      	eors	r3, r2
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <read_buttons+0xcc>)
 800061a:	701a      	strb	r2, [r3, #0]

	     if (READ_BIN(but_1, 0))
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <read_buttons+0xc4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffa4 	bl	8000570 <READ_BIN>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <read_buttons+0x92>
	     {
	         return BUTTON4_PRESSED;
 800062e:	2300      	movs	r3, #0
 8000630:	e016      	b.n	8000660 <read_buttons+0xc0>
	     }
	     else if (READ_BIN(but_2, 0))
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <read_buttons+0xc8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff99 	bl	8000570 <READ_BIN>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <read_buttons+0xa8>
	     {
	         return BUTTON5_PRESSED;
 8000644:	2301      	movs	r3, #1
 8000646:	e00b      	b.n	8000660 <read_buttons+0xc0>
	     }
	     else if (READ_BIN(but_3, 0))
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <read_buttons+0xcc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff8e 	bl	8000570 <READ_BIN>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <read_buttons+0xbe>
	     {
	         return BUTTON6_PRESSED;
 800065a:	2302      	movs	r3, #2
 800065c:	e000      	b.n	8000660 <read_buttons+0xc0>
	     }
	     else
	     {
	         return NO_BUTTON_PRESSED;
 800065e:	2303      	movs	r3, #3
	     }
}
 8000660:	4618      	mov	r0, r3
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001be 	.word	0x200001be
 8000668:	200001bf 	.word	0x200001bf
 800066c:	200001c0 	.word	0x200001c0

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fc1e 	bl	8000eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f8a7 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fa0b 	bl	8000a98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000682:	f000 f8ff 	bl	8000884 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000686:	f000 f961 	bl	800094c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800068a:	f000 f9d5 	bl	8000a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800068e:	2108      	movs	r1, #8
 8000690:	4841      	ldr	r0, [pc, #260]	@ (8000798 <main+0x128>)
 8000692:	f003 fb7b 	bl	8003d8c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ButtonState buttonState;
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000696:	4841      	ldr	r0, [pc, #260]	@ (800079c <main+0x12c>)
 8000698:	f000 fffe 	bl	8001698 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800069c:	2164      	movs	r1, #100	@ 0x64
 800069e:	483f      	ldr	r0, [pc, #252]	@ (800079c <main+0x12c>)
 80006a0:	f001 f890 	bl	80017c4 <HAL_ADC_PollForConversion>
	  adcVal = HAL_ADC_GetValue(&hadc1);
 80006a4:	483d      	ldr	r0, [pc, #244]	@ (800079c <main+0x12c>)
 80006a6:	f001 f91c 	bl	80018e2 <HAL_ADC_GetValue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b3c      	ldr	r3, [pc, #240]	@ (80007a0 <main+0x130>)
 80006b0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80006b2:	483a      	ldr	r0, [pc, #232]	@ (800079c <main+0x12c>)
 80006b4:	f001 f853 	bl	800175e <HAL_ADC_Stop>

	  buttonState = read_buttons();
 80006b8:	f7ff ff72 	bl	80005a0 <read_buttons>
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]

	  if(HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin) == GPIO_PIN_RESET)
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c6:	f002 f8ed 	bl	80028a4 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d140      	bne.n	8000752 <main+0xe2>
	  {

	  	switch (buttonState) {
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d83d      	bhi.n	8000752 <main+0xe2>
 80006d6:	a201      	add	r2, pc, #4	@ (adr r2, 80006dc <main+0x6c>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	0800070d 	.word	0x0800070d
 80006e4:	0800072b 	.word	0x0800072b
 80006e8:	08000749 	.word	0x08000749
	  		 case BUTTON4_PRESSED:
	  		    HAL_UART_Transmit(&huart1, (uint8_t*)"Vegetables 10%\n", 13, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	220d      	movs	r2, #13
 80006f2:	492c      	ldr	r1, [pc, #176]	@ (80007a4 <main+0x134>)
 80006f4:	482c      	ldr	r0, [pc, #176]	@ (80007a8 <main+0x138>)
 80006f6:	f004 fa5b 	bl	8004bb0 <HAL_UART_Transmit>
	  		    TIM2 -> CCR3 = 10;
 80006fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006fe:	220a      	movs	r2, #10
 8000700:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		    timing = 60000;
 8000702:	4b2a      	ldr	r3, [pc, #168]	@ (80007ac <main+0x13c>)
 8000704:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000708:	601a      	str	r2, [r3, #0]
	  		    break;
 800070a:	e022      	b.n	8000752 <main+0xe2>
	  		 case BUTTON5_PRESSED:
	  		    HAL_UART_Transmit(&huart1, (uint8_t*)"Milk 50%\n", 9, HAL_MAX_DELAY);
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	2209      	movs	r2, #9
 8000712:	4927      	ldr	r1, [pc, #156]	@ (80007b0 <main+0x140>)
 8000714:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <main+0x138>)
 8000716:	f004 fa4b 	bl	8004bb0 <HAL_UART_Transmit>
	  		    TIM2 -> CCR3 = 50;
 800071a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800071e:	2232      	movs	r2, #50	@ 0x32
 8000720:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		    timing = 120000;
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <main+0x13c>)
 8000724:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <main+0x144>)
 8000726:	601a      	str	r2, [r3, #0]
	  		    break;
 8000728:	e013      	b.n	8000752 <main+0xe2>
	  		 case BUTTON6_PRESSED:
	  		    HAL_UART_Transmit(&huart1, (uint8_t*)"Meat 100%\n", 10, HAL_MAX_DELAY);
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	220a      	movs	r2, #10
 8000730:	4921      	ldr	r1, [pc, #132]	@ (80007b8 <main+0x148>)
 8000732:	481d      	ldr	r0, [pc, #116]	@ (80007a8 <main+0x138>)
 8000734:	f004 fa3c 	bl	8004bb0 <HAL_UART_Transmit>
                TIM2 -> CCR3 = 100;
 8000738:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073c:	2264      	movs	r2, #100	@ 0x64
 800073e:	63da      	str	r2, [r3, #60]	@ 0x3c
                timing = 180000;
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <main+0x13c>)
 8000742:	4a1e      	ldr	r2, [pc, #120]	@ (80007bc <main+0x14c>)
 8000744:	601a      	str	r2, [r3, #0]
	  		    break;
 8000746:	e004      	b.n	8000752 <main+0xe2>
             case NO_BUTTON_PRESSED:
	  		    TIM2 -> CCR3 = 0;
 8000748:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800074c:	2200      	movs	r2, #0
 800074e:	63da      	str	r2, [r3, #60]	@ 0x3c
	  		    break;
 8000750:	bf00      	nop
	  	}

	  }

	  if(timing < HAL_GetTick())
 8000752:	f000 fc19 	bl	8000f88 <HAL_GetTick>
 8000756:	4602      	mov	r2, r0
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <main+0x13c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	429a      	cmp	r2, r3
 800075e:	d905      	bls.n	800076c <main+0xfc>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Your food is out of date\n", 24, 100);
 8000760:	2364      	movs	r3, #100	@ 0x64
 8000762:	2218      	movs	r2, #24
 8000764:	4916      	ldr	r1, [pc, #88]	@ (80007c0 <main+0x150>)
 8000766:	4810      	ldr	r0, [pc, #64]	@ (80007a8 <main+0x138>)
 8000768:	f004 fa22 	bl	8004bb0 <HAL_UART_Transmit>
	  }
	  HAL_Delay(100);
 800076c:	2064      	movs	r0, #100	@ 0x64
 800076e:	f000 fc17 	bl	8000fa0 <HAL_Delay>

	  sprintf(msg, "%hu\r\n", adcVal);
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <main+0x130>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	4912      	ldr	r1, [pc, #72]	@ (80007c4 <main+0x154>)
 800077a:	4813      	ldr	r0, [pc, #76]	@ (80007c8 <main+0x158>)
 800077c:	f004 fee4 	bl	8005548 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8000780:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <main+0x158>)
 8000782:	f7ff fd25 	bl	80001d0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29a      	uxth	r2, r3
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	490e      	ldr	r1, [pc, #56]	@ (80007c8 <main+0x158>)
 800078e:	4806      	ldr	r0, [pc, #24]	@ (80007a8 <main+0x138>)
 8000790:	f004 fa0e 	bl	8004bb0 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8000794:	e77f      	b.n	8000696 <main+0x26>
 8000796:	bf00      	nop
 8000798:	200000dc 	.word	0x200000dc
 800079c:	20000078 	.word	0x20000078
 80007a0:	200001b0 	.word	0x200001b0
 80007a4:	08005ea0 	.word	0x08005ea0
 80007a8:	20000128 	.word	0x20000128
 80007ac:	200001c4 	.word	0x200001c4
 80007b0:	08005eb0 	.word	0x08005eb0
 80007b4:	0001d4c0 	.word	0x0001d4c0
 80007b8:	08005ebc 	.word	0x08005ebc
 80007bc:	0002bf20 	.word	0x0002bf20
 80007c0:	08005ec8 	.word	0x08005ec8
 80007c4:	08005ee4 	.word	0x08005ee4
 80007c8:	200001b4 	.word	0x200001b4

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b096      	sub	sp, #88	@ 0x58
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2244      	movs	r2, #68	@ 0x44
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fed4 	bl	8005588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007f2:	f002 f88d 	bl	8002910 <HAL_PWREx_ControlVoltageScaling>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007fc:	f000 f982 	bl	8000b04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000800:	f002 f868 	bl	80028d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <SystemClock_Config+0xb4>)
 8000806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800080a:	4a1d      	ldr	r2, [pc, #116]	@ (8000880 <SystemClock_Config+0xb4>)
 800080c:	f023 0318 	bic.w	r3, r3, #24
 8000810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000814:	2316      	movs	r3, #22
 8000816:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000820:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2310      	movs	r3, #16
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000826:	2301      	movs	r3, #1
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800082e:	2360      	movs	r3, #96	@ 0x60
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f8be 	bl	80029bc <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000846:	f000 f95d 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800084e:	2301      	movs	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fcbe 	bl	80031e4 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800086e:	f000 f949 	bl	8000b04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000872:	f003 f8d1 	bl	8003a18 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000876:	bf00      	nop
 8000878:	3758      	adds	r7, #88	@ 0x58
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089a:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <MX_ADC1_Init+0xbc>)
 800089c:	4a29      	ldr	r2, [pc, #164]	@ (8000944 <MX_ADC1_Init+0xc0>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a0:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008be:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fa:	4811      	ldr	r0, [pc, #68]	@ (8000940 <MX_ADC1_Init+0xbc>)
 80008fc:	f000 fd8a 	bl	8001414 <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000906:	f000 f8fd 	bl	8000b04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_ADC1_Init+0xc4>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	237f      	movs	r3, #127	@ 0x7f
 8000918:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091a:	2304      	movs	r3, #4
 800091c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_ADC1_Init+0xbc>)
 8000928:	f000 ffe8 	bl	80018fc <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000932:	f000 f8e7 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000078 	.word	0x20000078
 8000944:	50040000 	.word	0x50040000
 8000948:	14f00020 	.word	0x14f00020

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	@ 0x38
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 8000980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000986:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 8000994:	2264      	movs	r2, #100	@ 0x64
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4823      	ldr	r0, [pc, #140]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 80009a6:	f003 f939 	bl	8003c1c <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009b0:	f000 f8a8 	bl	8000b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 80009c2:	f003 fbd5 	bl	8004170 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009cc:	f000 f89a 	bl	8000b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009d0:	4818      	ldr	r0, [pc, #96]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 80009d2:	f003 f97a 	bl	8003cca <HAL_TIM_PWM_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009dc:	f000 f892 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 80009f0:	f004 f82a 	bl	8004a48 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009fa:	f000 f883 	bl	8000b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	@ 0x60
 8000a00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2208      	movs	r2, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 8000a16:	f003 fa97 	bl	8003f48 <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a20:	f000 f870 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <MX_TIM2_Init+0xe8>)
 8000a26:	f000 f919 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	@ 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000dc 	.word	0x200000dc

08000a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	@ (8000a94 <MX_USART1_UART_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a44:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_USART1_UART_Init+0x58>)
 8000a7c:	f004 f84a 	bl	8004b14 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 f83d 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000128 	.word	0x20000128
 8000a94:	40013800 	.word	0x40013800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_GPIO_Init+0x68>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <MX_GPIO_Init+0x68>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_GPIO_Init+0x68>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_GPIO_Init+0x68>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <MX_GPIO_Init+0x68>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_GPIO_Init+0x68>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BUT4_Pin BUT5_Pin BUT6_Pin IR_Pin */
  GPIO_InitStruct.Pin = BUT4_Pin|BUT5_Pin|BUT6_Pin|IR_Pin;
 8000ade:	23f0      	movs	r3, #240	@ 0xf0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f001 fd6c 	bl	80025d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09e      	sub	sp, #120	@ 0x78
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2254      	movs	r2, #84	@ 0x54
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fd05 	bl	8005588 <memset>
  if(hadc->Instance==ADC1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a25      	ldr	r2, [pc, #148]	@ (8000c18 <HAL_ADC_MspInit+0xc0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d143      	bne.n	8000c10 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b92:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 8000b9c:	2328      	movs	r3, #40	@ 0x28
 8000b9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fd38 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bc2:	f7ff ff9f 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_ADC_MspInit+0xc4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f001 fce0 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3778      	adds	r7, #120	@ 0x78
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	50040000 	.word	0x50040000
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c30:	d10b      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_TIM_Base_MspInit+0x38>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_TIM_Base_MspInit+0x38>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_TIM_Base_MspInit+0x38>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_TIM_MspPostInit+0x64>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <HAL_TIM_MspPostInit+0x64>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_TIM_MspPostInit+0x64>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c96:	2304      	movs	r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f001 fc8c 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b09e      	sub	sp, #120	@ 0x78
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	2254      	movs	r2, #84	@ 0x54
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 fc4f 	bl	8005588 <memset>
  if(huart->Instance==USART1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <HAL_UART_MspInit+0xa8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d137      	bne.n	8000d64 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fc93 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d0c:	f7ff fefa 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d10:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_UART_MspInit+0xac>)
 8000d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d14:	4a16      	ldr	r2, [pc, #88]	@ (8000d70 <HAL_UART_MspInit+0xac>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_UART_MspInit+0xac>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_UART_MspInit+0xac>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <HAL_UART_MspInit+0xac>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_UART_MspInit+0xac>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d40:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d52:	2307      	movs	r3, #7
 8000d54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d60:	f001 fc36 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3778      	adds	r7, #120	@ 0x78
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40021000 	.word	0x40021000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dca:	f000 f8c9 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	@ (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f004 fbc8 	bl	8005598 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20010000 	.word	0x20010000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	200001c8 	.word	0x200001c8
 8000e3c:	20000318 	.word	0x20000318

08000e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e68:	f7ff ffea 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	@ (8000ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <LoopForever+0xe>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb0 <LoopForever+0x16>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f004 fb87 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e96:	f7ff fbeb 	bl	8000670 <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea8:	08005f78 	.word	0x08005f78
  ldr r2, =_sbss
 8000eac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eb0:	20000318 	.word	0x20000318

08000eb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_IRQHandler>

08000eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f001 fb51 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f80e 	bl	8000ee8 <HAL_InitTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	e001      	b.n	8000edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed8:	f7ff fe1a 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_InitTick+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d023      	beq.n	8000f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_InitTick+0x70>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fb4f 	bl	80025b6 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10f      	bne.n	8000f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d809      	bhi.n	8000f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f001 fb27 	bl	800257e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_InitTick+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e007      	b.n	8000f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e004      	b.n	8000f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e001      	b.n	8000f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001cc 	.word	0x200001cc

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001cc 	.word	0x200001cc

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3360      	adds	r3, #96	@ 0x60
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <LL_ADC_SetOffset+0x44>)
 8001072:	4013      	ands	r3, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	4313      	orrs	r3, r2
 8001080:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001088:	bf00      	nop
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	03fff000 	.word	0x03fff000

08001098 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3360      	adds	r3, #96	@ 0x60
 80010a6:	461a      	mov	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3360      	adds	r3, #96	@ 0x60
 80010d4:	461a      	mov	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3330      	adds	r3, #48	@ 0x30
 8001130:	461a      	mov	r2, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	4413      	add	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	211f      	movs	r1, #31
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	0e9b      	lsrs	r3, r3, #26
 8001158:	f003 011f 	and.w	r1, r3, #31
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	431a      	orrs	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3314      	adds	r3, #20
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	0e5b      	lsrs	r3, r3, #25
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	0d1b      	lsrs	r3, r3, #20
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2107      	movs	r1, #7
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	401a      	ands	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	0d1b      	lsrs	r3, r3, #20
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0318 	and.w	r3, r3, #24
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f4:	40d9      	lsrs	r1, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	400b      	ands	r3, r1
 80011fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fe:	431a      	orrs	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	0007ffff 	.word	0x0007ffff

08001218 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6093      	str	r3, [r2, #8]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800124c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001250:	d101      	bne.n	8001256 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001274:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001278:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012a0:	d101      	bne.n	80012a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012f0:	f043 0202 	orr.w	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <LL_ADC_IsEnabled+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_IsEnabled+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsDisableOngoing+0x18>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsDisableOngoing+0x1a>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001364:	f043 0204 	orr.w	r2, r3, #4
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001388:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800138c:	f043 0210 	orr.w	r2, r3, #16
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d101      	bne.n	80013b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d101      	bne.n	8001406 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e126      	b.n	800167c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fb8b 	bl	8000b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fef1 	bl	800123c <LL_ADC_IsDeepPowerDownEnabled>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fed7 	bl	8001218 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff0c 	bl	800128c <LL_ADC_IsInternalRegulatorEnabled>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d115      	bne.n	80014a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fef0 	bl	8001264 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001484:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <HAL_ADC_Init+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	4a7f      	ldr	r2, [pc, #508]	@ (8001688 <HAL_ADC_Init+0x274>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	3301      	adds	r3, #1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff feee 	bl	800128c <LL_ADC_IsInternalRegulatorEnabled>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ba:	f043 0210 	orr.w	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff62 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 80014dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 80bf 	bne.w	800166a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 80bb 	bne.w	800166a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014fc:	f043 0202 	orr.w	r2, r3, #2
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fefb 	bl	8001304 <LL_ADC_IsEnabled>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10b      	bne.n	800152c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001514:	485d      	ldr	r0, [pc, #372]	@ (800168c <HAL_ADC_Init+0x278>)
 8001516:	f7ff fef5 	bl	8001304 <LL_ADC_IsEnabled>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4619      	mov	r1, r3
 8001526:	485a      	ldr	r0, [pc, #360]	@ (8001690 <HAL_ADC_Init+0x27c>)
 8001528:	f7ff fd5e 	bl	8000fe8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e5b      	ldrb	r3, [r3, #25]
 8001530:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001536:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800153c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001542:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	3b01      	subs	r3, #1
 8001560:	045b      	lsls	r3, r3, #17
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001574:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b42      	ldr	r3, [pc, #264]	@ (8001694 <HAL_ADC_Init+0x280>)
 800158c:	4013      	ands	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	430b      	orrs	r3, r1
 8001596:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff26 	bl	80013ee <LL_ADC_INJ_IsConversionOngoing>
 80015a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d13d      	bne.n	8001626 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d13a      	bne.n	8001626 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015b4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015bc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015cc:	f023 0302 	bic.w	r3, r3, #2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	69b9      	ldr	r1, [r7, #24]
 80015d6:	430b      	orrs	r3, r1
 80015d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d118      	bne.n	8001616 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001600:	4311      	orrs	r1, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001606:	430a      	orrs	r2, r1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	e007      	b.n	8001626 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10c      	bne.n	8001648 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	f023 010f 	bic.w	r1, r3, #15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	631a      	str	r2, [r3, #48]	@ 0x30
 8001646:	e007      	b.n	8001658 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 020f 	bic.w	r2, r2, #15
 8001656:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165c:	f023 0303 	bic.w	r3, r3, #3
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54
 8001668:	e007      	b.n	800167a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800167a:	7ffb      	ldrb	r3, [r7, #31]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	053e2d63 	.word	0x053e2d63
 800168c:	50040000 	.word	0x50040000
 8001690:	50040300 	.word	0x50040300
 8001694:	fff0c007 	.word	0xfff0c007

08001698 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fe7b 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d14f      	bne.n	8001750 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ADC_Start+0x26>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e04b      	b.n	8001756 <HAL_ADC_Start+0xbe>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fdb6 	bl	8002238 <ADC_Enable>
 80016cc:	4603      	mov	r3, r0
 80016ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d137      	bne.n	8001746 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f6:	d106      	bne.n	8001706 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f023 0206 	bic.w	r2, r3, #6
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	659a      	str	r2, [r3, #88]	@ 0x58
 8001704:	e002      	b.n	800170c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	221c      	movs	r2, #28
 8001712:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001732:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fe06 	bl	8001350 <LL_ADC_REG_StartConversion>
 8001744:	e006      	b.n	8001754 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800174e:	e001      	b.n	8001754 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_ADC_Stop+0x16>
 8001770:	2302      	movs	r3, #2
 8001772:	e023      	b.n	80017bc <HAL_ADC_Stop+0x5e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800177c:	2103      	movs	r1, #3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fc9e 	bl	80020c0 <ADC_ConversionStop>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d111      	bne.n	80017b2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fdd8 	bl	8002344 <ADC_Disable>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d102      	bne.n	80017dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017d6:	2308      	movs	r3, #8
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e010      	b.n	80017fe <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80017fa:	2304      	movs	r3, #4
 80017fc:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017fe:	f7ff fbc3 	bl	8000f88 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001804:	e021      	b.n	800184a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d01d      	beq.n	800184a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800180e:	f7ff fbbb 	bl	8000f88 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d302      	bcc.n	8001824 <HAL_ADC_PollForConversion+0x60>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d112      	bne.n	800184a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10b      	bne.n	800184a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001836:	f043 0204 	orr.w	r2, r3, #4
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e047      	b.n	80018da <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0d6      	beq.n	8001806 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc46 	bl	80010fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01c      	beq.n	80018ae <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e5b      	ldrb	r3, [r3, #25]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d118      	bne.n	80018ae <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b08      	cmp	r3, #8
 8001888:	d111      	bne.n	80018ae <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d104      	bne.n	80018c6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2208      	movs	r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e008      	b.n	80018d8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	220c      	movs	r2, #12
 80018d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0b6      	sub	sp, #216	@ 0xd8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ADC_ConfigChannel+0x22>
 800191a:	2302      	movs	r3, #2
 800191c:	e3bb      	b.n	8002096 <HAL_ADC_ConfigChannel+0x79a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fd38 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	f040 83a0 	bne.w	8002078 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d824      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	3b02      	subs	r3, #2
 800194e:	2b03      	cmp	r3, #3
 8001950:	d81b      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x8e>
 8001952:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <HAL_ADC_ConfigChannel+0x5c>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001969 	.word	0x08001969
 800195c:	08001971 	.word	0x08001971
 8001960:	08001979 	.word	0x08001979
 8001964:	08001981 	.word	0x08001981
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001968:	230c      	movs	r3, #12
 800196a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800196e:	e010      	b.n	8001992 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001970:	2312      	movs	r3, #18
 8001972:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001976:	e00c      	b.n	8001992 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001978:	2318      	movs	r3, #24
 800197a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800197e:	e008      	b.n	8001992 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001988:	e003      	b.n	8001992 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800198a:	2306      	movs	r3, #6
 800198c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001990:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80019a0:	f7ff fbbe 	bl	8001120 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fcf9 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 80019ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fd19 	bl	80013ee <LL_ADC_INJ_IsConversionOngoing>
 80019bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 81a4 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 819f 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	461a      	mov	r2, r3
 80019e2:	f7ff fbc9 	bl	8001178 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d00a      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6919      	ldr	r1, [r3, #16]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a18:	f7ff fb1a 	bl	8001050 <LL_ADC_SetOffset>
 8001a1c:	e179      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb37 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x14e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb2c 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	e01e      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x18c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fb21 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e004      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1a4>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	e018      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x1d6>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001ab4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff faf0 	bl	80010c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fad4 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x214>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2101      	movs	r1, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fac9 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 021f 	and.w	r2, r3, #31
 8001b0e:	e01e      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x252>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fabe 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e004      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x26a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	e018      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x29c>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e004      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fa8d 	bl	80010c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fa71 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x2da>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fa66 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	e01e      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x318>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2102      	movs	r1, #2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fa5b 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e004      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x330>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	e014      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x35a>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001c3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	e004      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d106      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2102      	movs	r1, #2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fa2e 	bl	80010c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2103      	movs	r1, #3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa12 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x398>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2103      	movs	r1, #3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fa07 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	f003 021f 	and.w	r2, r3, #31
 8001c92:	e017      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x3c8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2103      	movs	r1, #3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f9fc 	bl	8001098 <LL_ADC_GetOffsetChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	e003      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x3e0>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	e011      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x404>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cec:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e003      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2103      	movs	r1, #3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f9d9 	bl	80010c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff faf4 	bl	8001304 <LL_ADC_IsEnabled>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 8140 	bne.w	8001fa4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	461a      	mov	r2, r3
 8001d32:	f7ff fa4d 	bl	80011d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a8f      	ldr	r2, [pc, #572]	@ (8001f78 <HAL_ADC_ConfigChannel+0x67c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	f040 8131 	bne.w	8001fa4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x46e>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	bf94      	ite	ls
 8001d62:	2301      	movls	r3, #1
 8001d64:	2300      	movhi	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	e019      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x4a2>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d079      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x4c2>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	3301      	adds	r3, #1
 8001db6:	069b      	lsls	r3, r3, #26
 8001db8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dbc:	e015      	b.n	8001dea <HAL_ADC_ConfigChannel+0x4ee>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dce:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	069b      	lsls	r3, r3, #26
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x50e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	e017      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x53e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e003      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	ea42 0103 	orr.w	r1, r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x564>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	051b      	lsls	r3, r3, #20
 8001e5e:	e018      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x596>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	e003      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f003 021f 	and.w	r2, r3, #31
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e92:	430b      	orrs	r3, r1
 8001e94:	e081      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x5b6>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eb0:	e015      	b.n	8001ede <HAL_ADC_ConfigChannel+0x5e2>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	e003      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	069b      	lsls	r3, r3, #26
 8001eda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x602>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	e017      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x632>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	61bb      	str	r3, [r7, #24]
  return result;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	ea42 0103 	orr.w	r1, r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x65e>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	3301      	adds	r3, #1
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	051b      	lsls	r3, r3, #20
 8001f54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f58:	e01e      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x69c>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	60fb      	str	r3, [r7, #12]
  return result;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e006      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x688>
 8001f76:	bf00      	nop
 8001f78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	f003 021f 	and.w	r2, r3, #31
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b1e      	subs	r3, #30
 8001f92:	051b      	lsls	r3, r3, #20
 8001f94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7ff f8ea 	bl	8001178 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d06c      	beq.n	800208a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb0:	483c      	ldr	r0, [pc, #240]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fb2:	f7ff f83f 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 8001fb6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	@ (80020a8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d127      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d121      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a35      	ldr	r2, [pc, #212]	@ (80020ac <HAL_ADC_ConfigChannel+0x7b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d157      	bne.n	800208a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	482f      	ldr	r0, [pc, #188]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fe6:	f7ff f812 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fea:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002004:	e002      	b.n	800200c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3b01      	subs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002012:	e03a      	b.n	800208a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a27      	ldr	r2, [pc, #156]	@ (80020b8 <HAL_ADC_ConfigChannel+0x7bc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d113      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800201e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002022:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_ADC_ConfigChannel+0x7b0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12a      	bne.n	800208a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002038:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800203c:	4619      	mov	r1, r3
 800203e:	4819      	ldr	r0, [pc, #100]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002040:	f7fe ffe5 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002044:	e021      	b.n	800208a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_ADC_ConfigChannel+0x7c0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d11c      	bne.n	800208a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d116      	bne.n	800208a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <HAL_ADC_ConfigChannel+0x7b0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d111      	bne.n	800208a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800206a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002072:	f7fe ffcc 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
 8002076:	e008      	b.n	800208a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002092:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002096:	4618      	mov	r0, r3
 8002098:	37d8      	adds	r7, #216	@ 0xd8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	80080000 	.word	0x80080000
 80020a4:	50040300 	.word	0x50040300
 80020a8:	c7520000 	.word	0xc7520000
 80020ac:	50040000 	.word	0x50040000
 80020b0:	20000000 	.word	0x20000000
 80020b4:	053e2d63 	.word	0x053e2d63
 80020b8:	cb840000 	.word	0xcb840000
 80020bc:	80000001 	.word	0x80000001

080020c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f962 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f983 	bl	80013ee <LL_ADC_INJ_IsConversionOngoing>
 80020e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8098 	beq.w	8002228 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d02a      	beq.n	800215c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7e5b      	ldrb	r3, [r3, #25]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d126      	bne.n	800215c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e1b      	ldrb	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d122      	bne.n	800215c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002116:	2301      	movs	r3, #1
 8002118:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800211a:	e014      	b.n	8002146 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4a45      	ldr	r2, [pc, #276]	@ (8002234 <ADC_ConversionStop+0x174>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d90d      	bls.n	8002140 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e074      	b.n	800222a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d1e3      	bne.n	800211c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2240      	movs	r2, #64	@ 0x40
 800215a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d014      	beq.n	800218c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f91a 	bl	80013a0 <LL_ADC_REG_IsConversionOngoing>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f8d7 	bl	800132a <LL_ADC_IsDisableOngoing>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f8f6 	bl	8001378 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d014      	beq.n	80021bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f929 	bl	80013ee <LL_ADC_INJ_IsConversionOngoing>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f8bf 	bl	800132a <LL_ADC_IsDisableOngoing>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f905 	bl	80013c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d005      	beq.n	80021ce <ADC_ConversionStop+0x10e>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d105      	bne.n	80021d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021c8:	230c      	movs	r3, #12
 80021ca:	617b      	str	r3, [r7, #20]
        break;
 80021cc:	e005      	b.n	80021da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021ce:	2308      	movs	r3, #8
 80021d0:	617b      	str	r3, [r7, #20]
        break;
 80021d2:	e002      	b.n	80021da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021d4:	2304      	movs	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]
        break;
 80021d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021da:	f7fe fed5 	bl	8000f88 <HAL_GetTick>
 80021de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021e0:	e01b      	b.n	800221a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021e2:	f7fe fed1 	bl	8000f88 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d914      	bls.n	800221a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e007      	b.n	800222a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1dc      	bne.n	80021e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	a33fffff 	.word	0xa33fffff

08002238 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f85b 	bl	8001304 <LL_ADC_IsEnabled>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d169      	bne.n	8002328 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <ADC_Enable+0xfc>)
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e055      	b.n	800232a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f816 	bl	80012b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002288:	482b      	ldr	r0, [pc, #172]	@ (8002338 <ADC_Enable+0x100>)
 800228a:	f7fe fed3 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 800228e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002298:	4b28      	ldr	r3, [pc, #160]	@ (800233c <ADC_Enable+0x104>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	4a28      	ldr	r2, [pc, #160]	@ (8002340 <ADC_Enable+0x108>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022b2:	e002      	b.n	80022ba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fe62 	bl	8000f88 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022c6:	e028      	b.n	800231a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f819 	bl	8001304 <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe ffe9 	bl	80012b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022e2:	f7fe fe51 	bl	8000f88 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d914      	bls.n	800231a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00d      	beq.n	800231a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d1cf      	bne.n	80022c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	8000003f 	.word	0x8000003f
 8002338:	50040300 	.word	0x50040300
 800233c:	20000000 	.word	0x20000000
 8002340:	053e2d63 	.word	0x053e2d63

08002344 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe ffea 	bl	800132a <LL_ADC_IsDisableOngoing>
 8002356:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe ffd1 	bl	8001304 <LL_ADC_IsEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d047      	beq.n	80023f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d144      	bne.n	80023f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030d 	and.w	r3, r3, #13
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10c      	bne.n	8002396 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe ffab 	bl	80012dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2203      	movs	r2, #3
 800238c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800238e:	f7fe fdfb 	bl	8000f88 <HAL_GetTick>
 8002392:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002394:	e029      	b.n	80023ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e023      	b.n	80023fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023b2:	f7fe fde9 	bl	8000f88 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d914      	bls.n	80023ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00d      	beq.n	80023ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e007      	b.n	80023fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1dc      	bne.n	80023b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	@ (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff47 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff5c 	bl	800244c <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff8e 	bl	80024bc <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff5d 	bl	8002468 <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffb0 	bl	8002524 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e148      	b.n	8002872 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 813a 	beq.w	800286c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d005      	beq.n	8002610 <HAL_GPIO_Init+0x40>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d130      	bne.n	8002672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002646:	2201      	movs	r2, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0201 	and.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b03      	cmp	r3, #3
 800267c:	d017      	beq.n	80026ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d123      	bne.n	8002702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	08da      	lsrs	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3208      	adds	r2, #8
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0203 	and.w	r2, r3, #3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8094 	beq.w	800286c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002744:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	4a51      	ldr	r2, [pc, #324]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002750:	4b4f      	ldr	r3, [pc, #316]	@ (8002890 <HAL_GPIO_Init+0x2c0>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800275c:	4a4d      	ldr	r2, [pc, #308]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1d4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a43      	ldr	r2, [pc, #268]	@ (8002898 <HAL_GPIO_Init+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1d0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a42      	ldr	r2, [pc, #264]	@ (800289c <HAL_GPIO_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1cc>
 8002798:	2302      	movs	r3, #2
 800279a:	e004      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 800279c:	2307      	movs	r3, #7
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_GPIO_Init+0x1d6>
 80027a4:	2300      	movs	r3, #0
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	f002 0203 	and.w	r2, r2, #3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4093      	lsls	r3, r2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b6:	4937      	ldr	r1, [pc, #220]	@ (8002894 <HAL_GPIO_Init+0x2c4>)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	089b      	lsrs	r3, r3, #2
 80027bc:	3302      	adds	r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c4:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e8:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002812:	4a23      	ldr	r2, [pc, #140]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800283c:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002842:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002866:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f aeaf 	bne.w	80025e0 <HAL_GPIO_Init+0x10>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	40010000 	.word	0x40010000
 8002898:	48000400 	.word	0x48000400
 800289c:	48000800 	.word	0x48000800
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028f8:	4b04      	ldr	r3, [pc, #16]	@ (800290c <HAL_PWREx_GetVoltageRange+0x18>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800291e:	d130      	bne.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002920:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800292c:	d038      	beq.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002936:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002938:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800293e:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2232      	movs	r2, #50	@ 0x32
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9b      	lsrs	r3, r3, #18
 8002950:	3301      	adds	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002954:	e002      	b.n	800295c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3b01      	subs	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800295c:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002968:	d102      	bne.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x60>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f2      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297c:	d110      	bne.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e00f      	b.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298e:	d007      	beq.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002990:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002998:	4a05      	ldr	r2, [pc, #20]	@ (80029b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800299e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40007000 	.word	0x40007000
 80029b4:	20000000 	.word	0x20000000
 80029b8:	431bde83 	.word	0x431bde83

080029bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f000 bc02 	b.w	80031d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d0:	4b96      	ldr	r3, [pc, #600]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029da:	4b94      	ldr	r3, [pc, #592]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80e4 	beq.w	8002bba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4c>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	f040 808b 	bne.w	8002b16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	f040 8087 	bne.w	8002b16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a08:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_OscConfig+0x64>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e3d9      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_RCC_OscConfig+0x7e>
 8002a30:	4b7e      	ldr	r3, [pc, #504]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a38:	e005      	b.n	8002a46 <HAL_RCC_OscConfig+0x8a>
 8002a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d223      	bcs.n	8002a92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fd8c 	bl	800356c <RCC_SetFlashLatencyFromMSIRange>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e3ba      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5e:	4b73      	ldr	r3, [pc, #460]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a72      	ldr	r2, [pc, #456]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b70      	ldr	r3, [pc, #448]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	496d      	ldr	r1, [pc, #436]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	4968      	ldr	r1, [pc, #416]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
 8002a90:	e025      	b.n	8002ade <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a92:	4b66      	ldr	r3, [pc, #408]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a65      	ldr	r2, [pc, #404]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b63      	ldr	r3, [pc, #396]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4960      	ldr	r1, [pc, #384]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	495b      	ldr	r1, [pc, #364]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fd4c 	bl	800356c <RCC_SetFlashLatencyFromMSIRange>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e37a      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ade:	f000 fc81 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b51      	ldr	r3, [pc, #324]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	4950      	ldr	r1, [pc, #320]	@ (8002c30 <HAL_RCC_OscConfig+0x274>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a4e      	ldr	r2, [pc, #312]	@ (8002c34 <HAL_RCC_OscConfig+0x278>)
 8002afc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002afe:	4b4e      	ldr	r3, [pc, #312]	@ (8002c38 <HAL_RCC_OscConfig+0x27c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f9f0 	bl	8000ee8 <HAL_InitTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d052      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	e35e      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d032      	beq.n	8002b84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b1e:	4b43      	ldr	r3, [pc, #268]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a42      	ldr	r2, [pc, #264]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fa2d 	bl	8000f88 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b32:	f7fe fa29 	bl	8000f88 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e347      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b33      	ldr	r3, [pc, #204]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4930      	ldr	r1, [pc, #192]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	492b      	ldr	r1, [pc, #172]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
 8002b82:	e01a      	b.n	8002bba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b90:	f7fe f9fa 	bl	8000f88 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b98:	f7fe f9f6 	bl	8000f88 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e314      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x1dc>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d073      	beq.n	8002cae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x21c>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d063      	beq.n	8002cac <HAL_RCC_OscConfig+0x2f0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d15f      	bne.n	8002cac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e2f1      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x24c>
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e025      	b.n	8002c54 <HAL_RCC_OscConfig+0x298>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c10:	d114      	bne.n	8002c3c <HAL_RCC_OscConfig+0x280>
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a02      	ldr	r2, [pc, #8]	@ (8002c2c <HAL_RCC_OscConfig+0x270>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x298>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08005eec 	.word	0x08005eec
 8002c34:	20000000 	.word	0x20000000
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a9f      	ldr	r2, [pc, #636]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b9d      	ldr	r3, [pc, #628]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe f994 	bl	8000f88 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c64:	f7fe f990 	bl	8000f88 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e2ae      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c76:	4b92      	ldr	r3, [pc, #584]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2a8>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe f980 	bl	8000f88 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f97c 	bl	8000f88 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	@ 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e29a      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9e:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2d0>
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d060      	beq.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_OscConfig+0x310>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d119      	bne.n	8002cfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d116      	bne.n	8002cfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x328>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e277      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	061b      	lsls	r3, r3, #24
 8002cf2:	4973      	ldr	r1, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	e040      	b.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d023      	beq.n	8002d4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d02:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f93b 	bl	8000f88 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d16:	f7fe f937 	bl	8000f88 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e255      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	4b65      	ldr	r3, [pc, #404]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b62      	ldr	r3, [pc, #392]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	495f      	ldr	r1, [pc, #380]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
 8002d48:	e018      	b.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe f917 	bl	8000f88 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe f913 	bl	8000f88 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e231      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d70:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d03c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01c      	beq.n	8002dca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d90:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d96:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe f8f2 	bl	8000f88 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe f8ee 	bl	8000f88 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e20c      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <HAL_RCC_OscConfig+0x3ec>
 8002dc8:	e01b      	b.n	8002e02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fe f8d5 	bl	8000f88 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe f8d1 	bl	8000f88 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1ef      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df4:	4b32      	ldr	r3, [pc, #200]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ef      	bne.n	8002de2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80a6 	beq.w	8002f5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e14:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	4a26      	ldr	r2, [pc, #152]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e2c:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ec4 <HAL_RCC_OscConfig+0x508>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d118      	bne.n	8002e7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec4 <HAL_RCC_OscConfig+0x508>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_RCC_OscConfig+0x508>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e54:	f7fe f898 	bl	8000f88 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5c:	f7fe f894 	bl	8000f88 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1b2      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <HAL_RCC_OscConfig+0x508>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4d8>
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e92:	e029      	b.n	8002ee8 <HAL_RCC_OscConfig+0x52c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d115      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x50c>
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea2:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eac:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	4a03      	ldr	r2, [pc, #12]	@ (8002ec0 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x52c>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ece:	4a99      	ldr	r2, [pc, #612]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed8:	4b96      	ldr	r3, [pc, #600]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ede:	4a95      	ldr	r2, [pc, #596]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f84a 	bl	8000f88 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f846 	bl	8000f88 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e162      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0e:	4b89      	ldr	r3, [pc, #548]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ed      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x53c>
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f833 	bl	8000f88 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe f82f 	bl	8000f88 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e14b      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f3c:	4b7d      	ldr	r3, [pc, #500]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ed      	bne.n	8002f26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b78      	ldr	r3, [pc, #480]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f54:	4a77      	ldr	r2, [pc, #476]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01c      	beq.n	8002faa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f70:	4b70      	ldr	r3, [pc, #448]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f76:	4a6f      	ldr	r2, [pc, #444]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe f802 	bl	8000f88 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f88:	f7fd fffe 	bl	8000f88 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e11c      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9a:	4b66      	ldr	r3, [pc, #408]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ef      	beq.n	8002f88 <HAL_RCC_OscConfig+0x5cc>
 8002fa8:	e01b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002faa:	4b62      	ldr	r3, [pc, #392]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fb0:	4a60      	ldr	r2, [pc, #384]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fd ffe5 	bl	8000f88 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc2:	f7fd ffe1 	bl	8000f88 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0ff      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd4:	4b57      	ldr	r3, [pc, #348]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ef      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80f3 	beq.w	80031d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	f040 80c9 	bne.w	8003188 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 0203 	and.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003006:	429a      	cmp	r2, r3
 8003008:	d12c      	bne.n	8003064 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	3b01      	subs	r3, #1
 8003016:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d123      	bne.n	8003064 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003026:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d11b      	bne.n	8003064 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d113      	bne.n	8003064 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d109      	bne.n	8003064 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	085b      	lsrs	r3, r3, #1
 800305c:	3b01      	subs	r3, #1
 800305e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d06b      	beq.n	800313c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d062      	beq.n	8003130 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800306a:	4b32      	ldr	r3, [pc, #200]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0ac      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800307a:	4b2e      	ldr	r3, [pc, #184]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8003080:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003084:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003086:	f7fd ff7f 	bl	8000f88 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd ff7b 	bl	8000f88 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e099      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ac:	4b21      	ldr	r3, [pc, #132]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <HAL_RCC_OscConfig+0x77c>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030bc:	3a01      	subs	r2, #1
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030c6:	0212      	lsls	r2, r2, #8
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030ce:	0852      	lsrs	r2, r2, #1
 80030d0:	3a01      	subs	r2, #1
 80030d2:	0552      	lsls	r2, r2, #21
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0652      	lsls	r2, r2, #25
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030e6:	06d2      	lsls	r2, r2, #27
 80030e8:	430a      	orrs	r2, r1
 80030ea:	4912      	ldr	r1, [pc, #72]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a0c      	ldr	r2, [pc, #48]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8003102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003106:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003108:	f7fd ff3e 	bl	8000f88 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7fd ff3a 	bl	8000f88 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e058      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003122:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <HAL_RCC_OscConfig+0x778>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800312e:	e050      	b.n	80031d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e04f      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
 8003134:	40021000 	.word	0x40021000
 8003138:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313c:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d144      	bne.n	80031d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a23      	ldr	r2, [pc, #140]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003154:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003160:	f7fd ff12 	bl	8000f88 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7fd ff0e 	bl	8000f88 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e02c      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x7ac>
 8003186:	e024      	b.n	80031d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d01f      	beq.n	80031ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 8003194:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fd fef5 	bl	8000f88 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fd fef1 	bl	8000f88 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e00f      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4905      	ldr	r1, [pc, #20]	@ (80031dc <HAL_RCC_OscConfig+0x820>)
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x824>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
 80031cc:	e001      	b.n	80031d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	feeefffc 	.word	0xfeeefffc

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0e7      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b75      	ldr	r3, [pc, #468]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b72      	ldr	r3, [pc, #456]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4970      	ldr	r1, [pc, #448]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b6e      	ldr	r3, [pc, #440]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0cf      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	4b66      	ldr	r3, [pc, #408]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003240:	429a      	cmp	r2, r3
 8003242:	d908      	bls.n	8003256 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b63      	ldr	r3, [pc, #396]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4960      	ldr	r1, [pc, #384]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d04c      	beq.n	80032fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326a:	4b5a      	ldr	r3, [pc, #360]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d121      	bne.n	80032ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0a6      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003282:	4b54      	ldr	r3, [pc, #336]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d115      	bne.n	80032ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e09a      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329a:	4b4e      	ldr	r3, [pc, #312]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e08e      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032aa:	4b4a      	ldr	r3, [pc, #296]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e086      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b46      	ldr	r3, [pc, #280]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4943      	ldr	r1, [pc, #268]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd fe5c 	bl	8000f88 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fd fe58 	bl	8000f88 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e06e      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003314:	429a      	cmp	r2, r3
 8003316:	d208      	bcs.n	800332a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b2e      	ldr	r3, [pc, #184]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	492b      	ldr	r1, [pc, #172]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d210      	bcs.n	800335a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003338:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0207 	bic.w	r2, r3, #7
 8003340:	4923      	ldr	r1, [pc, #140]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003348:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <HAL_RCC_ClockConfig+0x1ec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e036      	b.n	80033c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003366:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4918      	ldr	r1, [pc, #96]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003384:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4910      	ldr	r1, [pc, #64]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003398:	f000 f824 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	490b      	ldr	r1, [pc, #44]	@ (80033d8 <HAL_RCC_ClockConfig+0x1f4>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	4a09      	ldr	r2, [pc, #36]	@ (80033dc <HAL_RCC_ClockConfig+0x1f8>)
 80033b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033b8:	4b09      	ldr	r3, [pc, #36]	@ (80033e0 <HAL_RCC_ClockConfig+0x1fc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fd93 	bl	8000ee8 <HAL_InitTick>
 80033c2:	4603      	mov	r3, r0
 80033c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033c6:	7afb      	ldrb	r3, [r7, #11]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40022000 	.word	0x40022000
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08005eec 	.word	0x08005eec
 80033dc:	20000000 	.word	0x20000000
 80033e0:	20000004 	.word	0x20000004

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	@ 0x24
 80033e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	4b3e      	ldr	r3, [pc, #248]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	4b3b      	ldr	r3, [pc, #236]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x34>
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d121      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d11e      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003418:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003424:	4b31      	ldr	r3, [pc, #196]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e005      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003440:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003448:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003454:	e00a      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d102      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800345c:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e004      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d101      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003468:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800346a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d134      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0xa6>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d003      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xac>
 8003488:	e005      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800348a:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800348c:	617b      	str	r3, [r7, #20]
      break;
 800348e:	e005      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003492:	617b      	str	r3, [r7, #20]
      break;
 8003494:	e002      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	617b      	str	r3, [r7, #20]
      break;
 800349a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800349c:	4b13      	ldr	r3, [pc, #76]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	3301      	adds	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034aa:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	fb03 f202 	mul.w	r2, r3, r2
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c2:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x108>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	0e5b      	lsrs	r3, r3, #25
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	3301      	adds	r3, #1
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034dc:	69bb      	ldr	r3, [r7, #24]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	@ 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08005f04 	.word	0x08005f04
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	007a1200 	.word	0x007a1200

080034fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <HAL_RCC_GetHCLKFreq+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000000 	.word	0x20000000

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003518:	f7ff fff0 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	08005efc 	.word	0x08005efc

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003544:	f7ff ffda 	bl	80034fc <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0adb      	lsrs	r3, r3, #11
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	08005efc 	.word	0x08005efc

0800356c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003578:	4b2a      	ldr	r3, [pc, #168]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003584:	f7ff f9b6 	bl	80028f4 <HAL_PWREx_GetVoltageRange>
 8003588:	6178      	str	r0, [r7, #20]
 800358a:	e014      	b.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4b25      	ldr	r3, [pc, #148]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003590:	4a24      	ldr	r2, [pc, #144]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	@ 0x58
 8003598:	4b22      	ldr	r3, [pc, #136]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a4:	f7ff f9a6 	bl	80028f4 <HAL_PWREx_GetVoltageRange>
 80035a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035bc:	d10b      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	@ 0x80
 80035c2:	d919      	bls.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80035c8:	d902      	bls.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ca:	2302      	movs	r3, #2
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e013      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d0:	2301      	movs	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e010      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	d902      	bls.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035dc:	2303      	movs	r3, #3
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e00a      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b80      	cmp	r3, #128	@ 0x80
 80035e6:	d102      	bne.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e8:	2302      	movs	r3, #2
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	e004      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b70      	cmp	r3, #112	@ 0x70
 80035f2:	d101      	bne.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f4:	2301      	movs	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 0207 	bic.w	r2, r3, #7
 8003600:	4909      	ldr	r1, [pc, #36]	@ (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003608:	4b07      	ldr	r3, [pc, #28]	@ (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	40022000 	.word	0x40022000

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003634:	2300      	movs	r3, #0
 8003636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003638:	2300      	movs	r3, #0
 800363a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003644:	2b00      	cmp	r3, #0
 8003646:	d031      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003650:	d01a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003652:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003656:	d814      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800365c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003660:	d10f      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003662:	4b5d      	ldr	r3, [pc, #372]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4a5c      	ldr	r2, [pc, #368]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366e:	e00c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f9de 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	74fb      	strb	r3, [r7, #19]
      break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003690:	4b51      	ldr	r3, [pc, #324]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003696:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369e:	494e      	ldr	r1, [pc, #312]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 809e 	beq.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036be:	4b46      	ldr	r3, [pc, #280]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b40      	ldr	r3, [pc, #256]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	4a3f      	ldr	r2, [pc, #252]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e0:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b3a      	ldr	r3, [pc, #232]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a39      	ldr	r2, [pc, #228]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fc44 	bl	8000f88 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fc40 	bl	8000f88 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	74fb      	strb	r3, [r7, #19]
        break;
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003718:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d15a      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800372a:	4b2b      	ldr	r3, [pc, #172]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01e      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	429a      	cmp	r2, r3
 8003744:	d019      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003746:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003750:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003752:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003762:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003768:	4a1b      	ldr	r2, [pc, #108]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003772:	4a19      	ldr	r2, [pc, #100]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fc00 	bl	8000f88 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	e00b      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fd fbfc 	bl	8000f88 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d902      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	74fb      	strb	r3, [r7, #19]
            break;
 80037a2:	e006      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a4:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ec      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b8:	4b07      	ldr	r3, [pc, #28]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	4904      	ldr	r1, [pc, #16]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80037ce:	e009      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
 80037d4:	e006      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e4:	7c7b      	ldrb	r3, [r7, #17]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	4a89      	ldr	r2, [pc, #548]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003802:	4b84      	ldr	r3, [pc, #528]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f023 0203 	bic.w	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4980      	ldr	r1, [pc, #512]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003824:	4b7b      	ldr	r3, [pc, #492]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	f023 020c 	bic.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	4978      	ldr	r1, [pc, #480]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003846:	4b73      	ldr	r3, [pc, #460]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	496f      	ldr	r1, [pc, #444]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003868:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003876:	4967      	ldr	r1, [pc, #412]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800388a:	4b62      	ldr	r3, [pc, #392]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003890:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	495e      	ldr	r1, [pc, #376]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ac:	4b59      	ldr	r3, [pc, #356]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	4956      	ldr	r1, [pc, #344]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ce:	4b51      	ldr	r3, [pc, #324]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	494d      	ldr	r1, [pc, #308]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d028      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f0:	4b48      	ldr	r3, [pc, #288]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	4945      	ldr	r1, [pc, #276]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800390e:	d106      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003910:	4b40      	ldr	r3, [pc, #256]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a3f      	ldr	r2, [pc, #252]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391a:	60d3      	str	r3, [r2, #12]
 800391c:	e011      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003926:	d10c      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	2101      	movs	r1, #1
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f882 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d028      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800394e:	4b31      	ldr	r3, [pc, #196]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003954:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	492d      	ldr	r1, [pc, #180]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800396c:	d106      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396e:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4a28      	ldr	r2, [pc, #160]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003978:	60d3      	str	r3, [r2, #12]
 800397a:	e011      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2101      	movs	r1, #1
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f853 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003996:	7cfb      	ldrb	r3, [r7, #19]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01c      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ac:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ba:	4916      	ldr	r1, [pc, #88]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2102      	movs	r1, #2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f830 	bl	8003a38 <RCCEx_PLLSAI1_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a00:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000

08003a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a46:	4b74      	ldr	r3, [pc, #464]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a52:	4b71      	ldr	r3, [pc, #452]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0203 	and.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10d      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
       ||
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
       ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d047      	beq.n	8003b0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	e044      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d018      	beq.n	8003abe <RCCEx_PLLSAI1_Config+0x86>
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d825      	bhi.n	8003adc <RCCEx_PLLSAI1_Config+0xa4>
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d002      	beq.n	8003a9a <RCCEx_PLLSAI1_Config+0x62>
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d009      	beq.n	8003aac <RCCEx_PLLSAI1_Config+0x74>
 8003a98:	e020      	b.n	8003adc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11d      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aaa:	e01a      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aac:	4b5a      	ldr	r3, [pc, #360]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d116      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e013      	b.n	8003ae6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003abe:	4b56      	ldr	r3, [pc, #344]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aca:	4b53      	ldr	r3, [pc, #332]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ada:	e006      	b.n	8003aea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae0:	e004      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003af2:	4b49      	ldr	r3, [pc, #292]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	430b      	orrs	r3, r1
 8003b08:	4943      	ldr	r1, [pc, #268]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d17c      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b14:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3f      	ldr	r2, [pc, #252]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fd fa32 	bl	8000f88 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b26:	e009      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b28:	f7fd fa2e 	bl	8000f88 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	73fb      	strb	r3, [r7, #15]
        break;
 8003b3a:	e005      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b3c:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ef      	bne.n	8003b28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d15f      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d110      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b54:	4b30      	ldr	r3, [pc, #192]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6892      	ldr	r2, [r2, #8]
 8003b64:	0211      	lsls	r1, r2, #8
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	06d2      	lsls	r2, r2, #27
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	492a      	ldr	r1, [pc, #168]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
 8003b74:	e027      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d112      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7c:	4b26      	ldr	r3, [pc, #152]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6912      	ldr	r2, [r2, #16]
 8003b92:	0852      	lsrs	r2, r2, #1
 8003b94:	3a01      	subs	r2, #1
 8003b96:	0552      	lsls	r2, r2, #21
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	491f      	ldr	r1, [pc, #124]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	610b      	str	r3, [r1, #16]
 8003ba0:	e011      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003baa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	0211      	lsls	r1, r2, #8
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6952      	ldr	r2, [r2, #20]
 8003bb8:	0852      	lsrs	r2, r2, #1
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0652      	lsls	r2, r2, #25
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	4915      	ldr	r1, [pc, #84]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bc6:	4b14      	ldr	r3, [pc, #80]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a13      	ldr	r2, [pc, #76]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f9d9 	bl	8000f88 <HAL_GetTick>
 8003bd6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bd8:	e009      	b.n	8003bee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bda:	f7fd f9d5 	bl	8000f88 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d902      	bls.n	8003bee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	73fb      	strb	r3, [r7, #15]
          break;
 8003bec:	e005      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bee:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ef      	beq.n	8003bda <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e049      	b.n	8003cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fc ffec 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f000 fb52 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e049      	b.n	8003d70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f841 	bl	8003d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 fafb 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_TIM_PWM_Start+0x24>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e03c      	b.n	8003e2a <HAL_TIM_PWM_Start+0x9e>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d109      	bne.n	8003dca <HAL_TIM_PWM_Start+0x3e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e02f      	b.n	8003e2a <HAL_TIM_PWM_Start+0x9e>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d109      	bne.n	8003de4 <HAL_TIM_PWM_Start+0x58>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	e022      	b.n	8003e2a <HAL_TIM_PWM_Start+0x9e>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d109      	bne.n	8003dfe <HAL_TIM_PWM_Start+0x72>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	e015      	b.n	8003e2a <HAL_TIM_PWM_Start+0x9e>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d109      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x8c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e008      	b.n	8003e2a <HAL_TIM_PWM_Start+0x9e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07e      	b.n	8003f30 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_PWM_Start+0xb6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e40:	e023      	b.n	8003e8a <HAL_TIM_PWM_Start+0xfe>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0xc6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e50:	e01b      	b.n	8003e8a <HAL_TIM_PWM_Start+0xfe>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0xd6>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e60:	e013      	b.n	8003e8a <HAL_TIM_PWM_Start+0xfe>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xe6>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e70:	e00b      	b.n	8003e8a <HAL_TIM_PWM_Start+0xfe>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start+0xf6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e80:	e003      	b.n	8003e8a <HAL_TIM_PWM_Start+0xfe>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fdb2 	bl	80049fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	@ (8003f38 <HAL_TIM_PWM_Start+0x1ac>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x12a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_TIM_PWM_Start+0x1b0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x12a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	@ (8003f40 <HAL_TIM_PWM_Start+0x1b4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_PWM_Start+0x12e>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <HAL_TIM_PWM_Start+0x130>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <HAL_TIM_PWM_Start+0x1ac>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIM_PWM_Start+0x162>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee2:	d004      	beq.n	8003eee <HAL_TIM_PWM_Start+0x162>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <HAL_TIM_PWM_Start+0x1b0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d115      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <HAL_TIM_PWM_Start+0x1b8>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d015      	beq.n	8003f2c <HAL_TIM_PWM_Start+0x1a0>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f06:	d011      	beq.n	8003f2c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	e008      	b.n	8003f2c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	00010007 	.word	0x00010007

08003f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0ff      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b14      	cmp	r3, #20
 8003f72:	f200 80f0 	bhi.w	8004156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08004157 	.word	0x08004157
 8003f84:	08004157 	.word	0x08004157
 8003f88:	08004157 	.word	0x08004157
 8003f8c:	08004011 	.word	0x08004011
 8003f90:	08004157 	.word	0x08004157
 8003f94:	08004157 	.word	0x08004157
 8003f98:	08004157 	.word	0x08004157
 8003f9c:	08004053 	.word	0x08004053
 8003fa0:	08004157 	.word	0x08004157
 8003fa4:	08004157 	.word	0x08004157
 8003fa8:	08004157 	.word	0x08004157
 8003fac:	08004093 	.word	0x08004093
 8003fb0:	08004157 	.word	0x08004157
 8003fb4:	08004157 	.word	0x08004157
 8003fb8:	08004157 	.word	0x08004157
 8003fbc:	080040d5 	.word	0x080040d5
 8003fc0:	08004157 	.word	0x08004157
 8003fc4:	08004157 	.word	0x08004157
 8003fc8:	08004157 	.word	0x08004157
 8003fcc:	08004115 	.word	0x08004115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f9f8 	bl	80043cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6999      	ldr	r1, [r3, #24]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	619a      	str	r2, [r3, #24]
      break;
 800400e:	e0a5      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa54 	bl	80044c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800402a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6999      	ldr	r1, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	619a      	str	r2, [r3, #24]
      break;
 8004050:	e084      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 faad 	bl	80045b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0208 	orr.w	r2, r2, #8
 800406c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0204 	bic.w	r2, r2, #4
 800407c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69d9      	ldr	r1, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	61da      	str	r2, [r3, #28]
      break;
 8004090:	e064      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fb05 	bl	80046a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	021a      	lsls	r2, r3, #8
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	61da      	str	r2, [r3, #28]
      break;
 80040d2:	e043      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fb42 	bl	8004764 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0208 	orr.w	r2, r2, #8
 80040ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004112:	e023      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fb7a 	bl	8004814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800412e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004154:	e002      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	75fb      	strb	r3, [r7, #23]
      break;
 800415a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop

08004170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIM_ConfigClockSource+0x1c>
 8004188:	2302      	movs	r3, #2
 800418a:	e0b6      	b.n	80042fa <HAL_TIM_ConfigClockSource+0x18a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c8:	d03e      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0xd8>
 80041ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ce:	f200 8087 	bhi.w	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d6:	f000 8086 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x176>
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041de:	d87f      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041e0:	2b70      	cmp	r3, #112	@ 0x70
 80041e2:	d01a      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xaa>
 80041e4:	2b70      	cmp	r3, #112	@ 0x70
 80041e6:	d87b      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041e8:	2b60      	cmp	r3, #96	@ 0x60
 80041ea:	d050      	beq.n	800428e <HAL_TIM_ConfigClockSource+0x11e>
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d877      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041f0:	2b50      	cmp	r3, #80	@ 0x50
 80041f2:	d03c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0xfe>
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d873      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d058      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0x13e>
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d86f      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 8004200:	2b30      	cmp	r3, #48	@ 0x30
 8004202:	d064      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d86b      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d060      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d867      	bhi.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05c      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d05a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x15e>
 8004218:	e062      	b.n	80042e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800422a:	f000 fbc7 	bl	80049bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800423c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	609a      	str	r2, [r3, #8]
      break;
 8004246:	e04f      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	f000 fbb0 	bl	80049bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800426a:	609a      	str	r2, [r3, #8]
      break;
 800426c:	e03c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	461a      	mov	r2, r3
 800427c:	f000 fb24 	bl	80048c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2150      	movs	r1, #80	@ 0x50
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fb7d 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 800428c:	e02c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429a:	461a      	mov	r2, r3
 800429c:	f000 fb43 	bl	8004926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2160      	movs	r1, #96	@ 0x60
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fb6d 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80042ac:	e01c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 fb04 	bl	80048c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fb5d 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e00c      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f000 fb54 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80042de:	e003      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e000      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <TIM_Base_SetConfig+0xbc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_Base_SetConfig+0x20>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004322:	d108      	bne.n	8004336 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a21      	ldr	r2, [pc, #132]	@ (80043c0 <TIM_Base_SetConfig+0xbc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x52>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x52>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <TIM_Base_SetConfig+0xc0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x52>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1d      	ldr	r2, [pc, #116]	@ (80043c8 <TIM_Base_SetConfig+0xc4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <TIM_Base_SetConfig+0xbc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0xa0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a0b      	ldr	r2, [pc, #44]	@ (80043c4 <TIM_Base_SetConfig+0xc0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0xa0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <TIM_Base_SetConfig+0xc4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	615a      	str	r2, [r3, #20]
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400

080043cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f023 0201 	bic.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 0302 	bic.w	r3, r3, #2
 8004418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a24      	ldr	r2, [pc, #144]	@ (80044b8 <TIM_OC1_SetConfig+0xec>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_OC1_SetConfig+0x70>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <TIM_OC1_SetConfig+0xf0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_OC1_SetConfig+0x70>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a22      	ldr	r2, [pc, #136]	@ (80044c0 <TIM_OC1_SetConfig+0xf4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10c      	bne.n	8004456 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0308 	bic.w	r3, r3, #8
 8004442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 0304 	bic.w	r3, r3, #4
 8004454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a17      	ldr	r2, [pc, #92]	@ (80044b8 <TIM_OC1_SetConfig+0xec>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <TIM_OC1_SetConfig+0xa2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <TIM_OC1_SetConfig+0xf0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_OC1_SetConfig+0xa2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a15      	ldr	r2, [pc, #84]	@ (80044c0 <TIM_OC1_SetConfig+0xf4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800447c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400

080044c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f023 0210 	bic.w	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <TIM_OC2_SetConfig+0xe8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a19      	ldr	r2, [pc, #100]	@ (80045ac <TIM_OC2_SetConfig+0xe8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC2_SetConfig+0x98>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <TIM_OC2_SetConfig+0xec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC2_SetConfig+0x98>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <TIM_OC2_SetConfig+0xf0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d113      	bne.n	8004584 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800456a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400

080045b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a21      	ldr	r2, [pc, #132]	@ (800469c <TIM_OC3_SetConfig+0xe4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10d      	bne.n	8004636 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a18      	ldr	r2, [pc, #96]	@ (800469c <TIM_OC3_SetConfig+0xe4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_OC3_SetConfig+0x96>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <TIM_OC3_SetConfig+0xe8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC3_SetConfig+0x96>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a16      	ldr	r2, [pc, #88]	@ (80046a4 <TIM_OC3_SetConfig+0xec>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400

080046a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	031b      	lsls	r3, r3, #12
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <TIM_OC4_SetConfig+0xb0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_OC4_SetConfig+0x74>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a13      	ldr	r2, [pc, #76]	@ (800475c <TIM_OC4_SetConfig+0xb4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_OC4_SetConfig+0x74>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <TIM_OC4_SetConfig+0xb8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d109      	bne.n	8004730 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400

08004764 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80047a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <TIM_OC5_SetConfig+0xa4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_OC5_SetConfig+0x6a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a12      	ldr	r2, [pc, #72]	@ (800480c <TIM_OC5_SetConfig+0xa8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_OC5_SetConfig+0x6a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <TIM_OC5_SetConfig+0xac>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d109      	bne.n	80047e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400

08004814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800485a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	051b      	lsls	r3, r3, #20
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a14      	ldr	r2, [pc, #80]	@ (80048bc <TIM_OC6_SetConfig+0xa8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_OC6_SetConfig+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <TIM_OC6_SetConfig+0xac>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC6_SetConfig+0x6c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a12      	ldr	r2, [pc, #72]	@ (80048c4 <TIM_OC6_SetConfig+0xb0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	029b      	lsls	r3, r3, #10
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400

080048c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 030a 	bic.w	r3, r3, #10
 8004904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b087      	sub	sp, #28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f023 0210 	bic.w	r2, r3, #16
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f043 0307 	orr.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2201      	movs	r2, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e04f      	b.n	8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a10      	ldr	r2, [pc, #64]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10c      	bne.n	8004aee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40014000 	.word	0x40014000

08004b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e040      	b.n	8004ba8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fc f8c4 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	@ 0x24
 8004b40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fade 	bl	800511c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8af 	bl	8004cc4 <UART_SetConfig>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e01b      	b.n	8004ba8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fb5d 	bl	8005260 <UART_CheckIdleState>
 8004ba6:	4603      	mov	r3, r0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d177      	bne.n	8004cb8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_Transmit+0x24>
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e070      	b.n	8004cba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2221      	movs	r2, #33	@ 0x21
 8004be4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be6:	f7fc f9cf 	bl	8000f88 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x68>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c20:	e02f      	b.n	8004c82 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	@ 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fbbf 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e03b      	b.n	8004cba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c54:	b292      	uxth	r2, r2
 8004c56:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e007      	b.n	8004c70 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1c9      	bne.n	8004c22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2140      	movs	r1, #64	@ 0x40
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fb89 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e005      	b.n	8004cba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b08a      	sub	sp, #40	@ 0x28
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4bb4      	ldr	r3, [pc, #720]	@ (8004fc4 <UART_SetConfig+0x300>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4aa9      	ldr	r2, [pc, #676]	@ (8004fc8 <UART_SetConfig+0x304>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4aa0      	ldr	r2, [pc, #640]	@ (8004fcc <UART_SetConfig+0x308>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d126      	bne.n	8004d9c <UART_SetConfig+0xd8>
 8004d4e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fd0 <UART_SetConfig+0x30c>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d81b      	bhi.n	8004d94 <UART_SetConfig+0xd0>
 8004d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <UART_SetConfig+0xa0>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d85 	.word	0x08004d85
 8004d6c:	08004d7d 	.word	0x08004d7d
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7a:	e080      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d82:	e07c      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d8a:	e078      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d92:	e074      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9a:	e070      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a8c      	ldr	r2, [pc, #560]	@ (8004fd4 <UART_SetConfig+0x310>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d138      	bne.n	8004e18 <UART_SetConfig+0x154>
 8004da6:	4b8a      	ldr	r3, [pc, #552]	@ (8004fd0 <UART_SetConfig+0x30c>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d82d      	bhi.n	8004e10 <UART_SetConfig+0x14c>
 8004db4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <UART_SetConfig+0xf8>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004e11 	.word	0x08004e11
 8004dc4:	08004e11 	.word	0x08004e11
 8004dc8:	08004e11 	.word	0x08004e11
 8004dcc:	08004e01 	.word	0x08004e01
 8004dd0:	08004e11 	.word	0x08004e11
 8004dd4:	08004e11 	.word	0x08004e11
 8004dd8:	08004e11 	.word	0x08004e11
 8004ddc:	08004df9 	.word	0x08004df9
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e09 	.word	0x08004e09
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e042      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfe:	e03e      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e06:	e03a      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e036      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e032      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8004fc8 <UART_SetConfig+0x304>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d12a      	bne.n	8004e78 <UART_SetConfig+0x1b4>
 8004e22:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd0 <UART_SetConfig+0x30c>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e30:	d01a      	beq.n	8004e68 <UART_SetConfig+0x1a4>
 8004e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e36:	d81b      	bhi.n	8004e70 <UART_SetConfig+0x1ac>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e3c:	d00c      	beq.n	8004e58 <UART_SetConfig+0x194>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e42:	d815      	bhi.n	8004e70 <UART_SetConfig+0x1ac>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <UART_SetConfig+0x18c>
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4c:	d008      	beq.n	8004e60 <UART_SetConfig+0x19c>
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x1ac>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e56:	e012      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5e:	e00e      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e66:	e00a      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e006      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e76:	e002      	b.n	8004e7e <UART_SetConfig+0x1ba>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a51      	ldr	r2, [pc, #324]	@ (8004fc8 <UART_SetConfig+0x304>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d17a      	bne.n	8004f7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d824      	bhi.n	8004eda <UART_SetConfig+0x216>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0x1d4>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004ecb 	.word	0x08004ecb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004edb 	.word	0x08004edb
 8004eb4:	08004edb 	.word	0x08004edb
 8004eb8:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fe fb2a 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	61f8      	str	r0, [r7, #28]
        break;
 8004ec2:	e010      	b.n	8004ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b44      	ldr	r3, [pc, #272]	@ (8004fd8 <UART_SetConfig+0x314>)
 8004ec6:	61fb      	str	r3, [r7, #28]
        break;
 8004ec8:	e00d      	b.n	8004ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fe fa8b 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8004ece:	61f8      	str	r0, [r7, #28]
        break;
 8004ed0:	e009      	b.n	8004ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed6:	61fb      	str	r3, [r7, #28]
        break;
 8004ed8:	e005      	b.n	8004ee6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8107 	beq.w	80050fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d305      	bcc.n	8004f0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d903      	bls.n	8004f12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f10:	e0f4      	b.n	80050fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2200      	movs	r2, #0
 8004f16:	461c      	mov	r4, r3
 8004f18:	4615      	mov	r5, r2
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	022b      	lsls	r3, r5, #8
 8004f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f28:	0222      	lsls	r2, r4, #8
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	6849      	ldr	r1, [r1, #4]
 8004f2e:	0849      	lsrs	r1, r1, #1
 8004f30:	2000      	movs	r0, #0
 8004f32:	4688      	mov	r8, r1
 8004f34:	4681      	mov	r9, r0
 8004f36:	eb12 0a08 	adds.w	sl, r2, r8
 8004f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4c:	4650      	mov	r0, sl
 8004f4e:	4659      	mov	r1, fp
 8004f50:	f7fb f996 	bl	8000280 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f62:	d308      	bcc.n	8004f76 <UART_SetConfig+0x2b2>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f6a:	d204      	bcs.n	8004f76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	e0c2      	b.n	80050fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f7c:	e0be      	b.n	80050fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f86:	d16a      	bne.n	800505e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d834      	bhi.n	8004ffa <UART_SetConfig+0x336>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0x2d4>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004ffb 	.word	0x08004ffb
 8004fa8:	08004feb 	.word	0x08004feb
 8004fac:	08004ffb 	.word	0x08004ffb
 8004fb0:	08004ffb 	.word	0x08004ffb
 8004fb4:	08004ffb 	.word	0x08004ffb
 8004fb8:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fe faaa 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	61f8      	str	r0, [r7, #28]
        break;
 8004fc2:	e020      	b.n	8005006 <UART_SetConfig+0x342>
 8004fc4:	efff69f3 	.word	0xefff69f3
 8004fc8:	40008000 	.word	0x40008000
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fab0 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61f8      	str	r0, [r7, #28]
        break;
 8004fe2:	e010      	b.n	8005006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8005118 <UART_SetConfig+0x454>)
 8004fe6:	61fb      	str	r3, [r7, #28]
        break;
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe f9fb 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8004fee:	61f8      	str	r0, [r7, #28]
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ff6:	61fb      	str	r3, [r7, #28]
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d077      	beq.n	80050fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005a      	lsls	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d916      	bls.n	8005056 <UART_SetConfig+0x392>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800502e:	d212      	bcs.n	8005056 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f023 030f 	bic.w	r3, r3, #15
 8005038:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	b29a      	uxth	r2, r3
 8005046:	8afb      	ldrh	r3, [r7, #22]
 8005048:	4313      	orrs	r3, r2
 800504a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	8afa      	ldrh	r2, [r7, #22]
 8005052:	60da      	str	r2, [r3, #12]
 8005054:	e052      	b.n	80050fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800505c:	e04e      	b.n	80050fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800505e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005062:	2b08      	cmp	r3, #8
 8005064:	d827      	bhi.n	80050b6 <UART_SetConfig+0x3f2>
 8005066:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <UART_SetConfig+0x3a8>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	08005091 	.word	0x08005091
 8005070:	08005099 	.word	0x08005099
 8005074:	080050a1 	.word	0x080050a1
 8005078:	080050b7 	.word	0x080050b7
 800507c:	080050a7 	.word	0x080050a7
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050b7 	.word	0x080050b7
 8005088:	080050b7 	.word	0x080050b7
 800508c:	080050af 	.word	0x080050af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fe fa40 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8005094:	61f8      	str	r0, [r7, #28]
        break;
 8005096:	e014      	b.n	80050c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7fe fa52 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 800509c:	61f8      	str	r0, [r7, #28]
        break;
 800509e:	e010      	b.n	80050c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005118 <UART_SetConfig+0x454>)
 80050a2:	61fb      	str	r3, [r7, #28]
        break;
 80050a4:	e00d      	b.n	80050c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a6:	f7fe f99d 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80050aa:	61f8      	str	r0, [r7, #28]
        break;
 80050ac:	e009      	b.n	80050c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050b2:	61fb      	str	r3, [r7, #28]
        break;
 80050b4:	e005      	b.n	80050c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050c0:	bf00      	nop
    }

    if (pclk != 0U)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d019      	beq.n	80050fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	085a      	lsrs	r2, r3, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b0f      	cmp	r3, #15
 80050e0:	d909      	bls.n	80050f6 <UART_SetConfig+0x432>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d205      	bcs.n	80050f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	e002      	b.n	80050fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005108:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800510c:	4618      	mov	r0, r3
 800510e:	3728      	adds	r7, #40	@ 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005116:	bf00      	nop
 8005118:	00f42400 	.word	0x00f42400

0800511c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800521a:	d10a      	bne.n	8005232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b098      	sub	sp, #96	@ 0x60
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005270:	f7fb fe8a 	bl	8000f88 <HAL_GetTick>
 8005274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d12e      	bne.n	80052e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f88c 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d021      	beq.n	80052e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e062      	b.n	80053a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d149      	bne.n	8005384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f856 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d03c      	beq.n	8005384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	623b      	str	r3, [r7, #32]
   return(result);
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800531e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005328:	633b      	str	r3, [r7, #48]	@ 0x30
 800532a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800532e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	60fb      	str	r3, [r7, #12]
   return(result);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800535c:	61fa      	str	r2, [r7, #28]
 800535e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69b9      	ldr	r1, [r7, #24]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	617b      	str	r3, [r7, #20]
   return(result);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e011      	b.n	80053a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3758      	adds	r7, #88	@ 0x58
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c0:	e049      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d045      	beq.n	8005456 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fb fddd 	bl	8000f88 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e048      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d031      	beq.n	8005456 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d110      	bne.n	8005422 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2208      	movs	r2, #8
 8005406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f838 	bl	800547e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2208      	movs	r2, #8
 8005412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e029      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005430:	d111      	bne.n	8005456 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800543a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f81e 	bl	800547e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e00f      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	429a      	cmp	r2, r3
 8005472:	d0a6      	beq.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800547e:	b480      	push	{r7}
 8005480:	b095      	sub	sp, #84	@ 0x54
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80054a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d118      	bne.n	8005526 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	60bb      	str	r3, [r7, #8]
   return(result);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f023 0310 	bic.w	r3, r3, #16
 8005508:	647b      	str	r3, [r7, #68]	@ 0x44
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	613b      	str	r3, [r7, #16]
   return(result);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800553a:	bf00      	nop
 800553c:	3754      	adds	r7, #84	@ 0x54
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <siprintf>:
 8005548:	b40e      	push	{r1, r2, r3}
 800554a:	b500      	push	{lr}
 800554c:	b09c      	sub	sp, #112	@ 0x70
 800554e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005550:	9002      	str	r0, [sp, #8]
 8005552:	9006      	str	r0, [sp, #24]
 8005554:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005558:	4809      	ldr	r0, [pc, #36]	@ (8005580 <siprintf+0x38>)
 800555a:	9107      	str	r1, [sp, #28]
 800555c:	9104      	str	r1, [sp, #16]
 800555e:	4909      	ldr	r1, [pc, #36]	@ (8005584 <siprintf+0x3c>)
 8005560:	f853 2b04 	ldr.w	r2, [r3], #4
 8005564:	9105      	str	r1, [sp, #20]
 8005566:	6800      	ldr	r0, [r0, #0]
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	a902      	add	r1, sp, #8
 800556c:	f000 f994 	bl	8005898 <_svfiprintf_r>
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	b01c      	add	sp, #112	@ 0x70
 8005578:	f85d eb04 	ldr.w	lr, [sp], #4
 800557c:	b003      	add	sp, #12
 800557e:	4770      	bx	lr
 8005580:	2000000c 	.word	0x2000000c
 8005584:	ffff0208 	.word	0xffff0208

08005588 <memset>:
 8005588:	4402      	add	r2, r0
 800558a:	4603      	mov	r3, r0
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	f803 1b01 	strb.w	r1, [r3], #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	@ (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4d0d      	ldr	r5, [pc, #52]	@ (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	@ (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2600      	movs	r6, #0
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4d0b      	ldr	r5, [pc, #44]	@ (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	@ (80055e8 <__libc_init_array+0x44>)
 80055b8:	f000 fc66 	bl	8005e88 <_init>
 80055bc:	1b64      	subs	r4, r4, r5
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2600      	movs	r6, #0
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	08005f70 	.word	0x08005f70
 80055e0:	08005f70 	.word	0x08005f70
 80055e4:	08005f70 	.word	0x08005f70
 80055e8:	08005f74 	.word	0x08005f74

080055ec <__retarget_lock_acquire_recursive>:
 80055ec:	4770      	bx	lr

080055ee <__retarget_lock_release_recursive>:
 80055ee:	4770      	bx	lr

080055f0 <_free_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d041      	beq.n	800567c <_free_r+0x8c>
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfb8      	it	lt
 8005602:	18e4      	addlt	r4, r4, r3
 8005604:	f000 f8e0 	bl	80057c8 <__malloc_lock>
 8005608:	4a1d      	ldr	r2, [pc, #116]	@ (8005680 <_free_r+0x90>)
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	b933      	cbnz	r3, 800561c <_free_r+0x2c>
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	6014      	str	r4, [r2, #0]
 8005612:	4628      	mov	r0, r5
 8005614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005618:	f000 b8dc 	b.w	80057d4 <__malloc_unlock>
 800561c:	42a3      	cmp	r3, r4
 800561e:	d908      	bls.n	8005632 <_free_r+0x42>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	bf01      	itttt	eq
 8005628:	6819      	ldreq	r1, [r3, #0]
 800562a:	685b      	ldreq	r3, [r3, #4]
 800562c:	1809      	addeq	r1, r1, r0
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	e7ed      	b.n	800560e <_free_r+0x1e>
 8005632:	461a      	mov	r2, r3
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b10b      	cbz	r3, 800563c <_free_r+0x4c>
 8005638:	42a3      	cmp	r3, r4
 800563a:	d9fa      	bls.n	8005632 <_free_r+0x42>
 800563c:	6811      	ldr	r1, [r2, #0]
 800563e:	1850      	adds	r0, r2, r1
 8005640:	42a0      	cmp	r0, r4
 8005642:	d10b      	bne.n	800565c <_free_r+0x6c>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	4401      	add	r1, r0
 8005648:	1850      	adds	r0, r2, r1
 800564a:	4283      	cmp	r3, r0
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	d1e0      	bne.n	8005612 <_free_r+0x22>
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	6053      	str	r3, [r2, #4]
 8005656:	4408      	add	r0, r1
 8005658:	6010      	str	r0, [r2, #0]
 800565a:	e7da      	b.n	8005612 <_free_r+0x22>
 800565c:	d902      	bls.n	8005664 <_free_r+0x74>
 800565e:	230c      	movs	r3, #12
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	e7d6      	b.n	8005612 <_free_r+0x22>
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	1821      	adds	r1, r4, r0
 8005668:	428b      	cmp	r3, r1
 800566a:	bf04      	itt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	bf04      	itt	eq
 8005674:	1809      	addeq	r1, r1, r0
 8005676:	6021      	streq	r1, [r4, #0]
 8005678:	6054      	str	r4, [r2, #4]
 800567a:	e7ca      	b.n	8005612 <_free_r+0x22>
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	bf00      	nop
 8005680:	20000314 	.word	0x20000314

08005684 <sbrk_aligned>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4e0f      	ldr	r6, [pc, #60]	@ (80056c4 <sbrk_aligned+0x40>)
 8005688:	460c      	mov	r4, r1
 800568a:	6831      	ldr	r1, [r6, #0]
 800568c:	4605      	mov	r5, r0
 800568e:	b911      	cbnz	r1, 8005696 <sbrk_aligned+0x12>
 8005690:	f000 fba6 	bl	8005de0 <_sbrk_r>
 8005694:	6030      	str	r0, [r6, #0]
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 fba1 	bl	8005de0 <_sbrk_r>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d103      	bne.n	80056aa <sbrk_aligned+0x26>
 80056a2:	f04f 34ff 	mov.w	r4, #4294967295
 80056a6:	4620      	mov	r0, r4
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d0f8      	beq.n	80056a6 <sbrk_aligned+0x22>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fb92 	bl	8005de0 <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d1f2      	bne.n	80056a6 <sbrk_aligned+0x22>
 80056c0:	e7ef      	b.n	80056a2 <sbrk_aligned+0x1e>
 80056c2:	bf00      	nop
 80056c4:	20000310 	.word	0x20000310

080056c8 <_malloc_r>:
 80056c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4606      	mov	r6, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d904      	bls.n	80056ee <_malloc_r+0x26>
 80056e4:	230c      	movs	r3, #12
 80056e6:	6033      	str	r3, [r6, #0]
 80056e8:	2000      	movs	r0, #0
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c4 <_malloc_r+0xfc>
 80056f2:	f000 f869 	bl	80057c8 <__malloc_lock>
 80056f6:	f8d8 3000 	ldr.w	r3, [r8]
 80056fa:	461c      	mov	r4, r3
 80056fc:	bb44      	cbnz	r4, 8005750 <_malloc_r+0x88>
 80056fe:	4629      	mov	r1, r5
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff ffbf 	bl	8005684 <sbrk_aligned>
 8005706:	1c43      	adds	r3, r0, #1
 8005708:	4604      	mov	r4, r0
 800570a:	d158      	bne.n	80057be <_malloc_r+0xf6>
 800570c:	f8d8 4000 	ldr.w	r4, [r8]
 8005710:	4627      	mov	r7, r4
 8005712:	2f00      	cmp	r7, #0
 8005714:	d143      	bne.n	800579e <_malloc_r+0xd6>
 8005716:	2c00      	cmp	r4, #0
 8005718:	d04b      	beq.n	80057b2 <_malloc_r+0xea>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	4639      	mov	r1, r7
 800571e:	4630      	mov	r0, r6
 8005720:	eb04 0903 	add.w	r9, r4, r3
 8005724:	f000 fb5c 	bl	8005de0 <_sbrk_r>
 8005728:	4581      	cmp	r9, r0
 800572a:	d142      	bne.n	80057b2 <_malloc_r+0xea>
 800572c:	6821      	ldr	r1, [r4, #0]
 800572e:	1a6d      	subs	r5, r5, r1
 8005730:	4629      	mov	r1, r5
 8005732:	4630      	mov	r0, r6
 8005734:	f7ff ffa6 	bl	8005684 <sbrk_aligned>
 8005738:	3001      	adds	r0, #1
 800573a:	d03a      	beq.n	80057b2 <_malloc_r+0xea>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	442b      	add	r3, r5
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	bb62      	cbnz	r2, 80057a4 <_malloc_r+0xdc>
 800574a:	f8c8 7000 	str.w	r7, [r8]
 800574e:	e00f      	b.n	8005770 <_malloc_r+0xa8>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	1b52      	subs	r2, r2, r5
 8005754:	d420      	bmi.n	8005798 <_malloc_r+0xd0>
 8005756:	2a0b      	cmp	r2, #11
 8005758:	d917      	bls.n	800578a <_malloc_r+0xc2>
 800575a:	1961      	adds	r1, r4, r5
 800575c:	42a3      	cmp	r3, r4
 800575e:	6025      	str	r5, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	6059      	strne	r1, [r3, #4]
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	bf08      	it	eq
 8005768:	f8c8 1000 	streq.w	r1, [r8]
 800576c:	5162      	str	r2, [r4, r5]
 800576e:	604b      	str	r3, [r1, #4]
 8005770:	4630      	mov	r0, r6
 8005772:	f000 f82f 	bl	80057d4 <__malloc_unlock>
 8005776:	f104 000b 	add.w	r0, r4, #11
 800577a:	1d23      	adds	r3, r4, #4
 800577c:	f020 0007 	bic.w	r0, r0, #7
 8005780:	1ac2      	subs	r2, r0, r3
 8005782:	bf1c      	itt	ne
 8005784:	1a1b      	subne	r3, r3, r0
 8005786:	50a3      	strne	r3, [r4, r2]
 8005788:	e7af      	b.n	80056ea <_malloc_r+0x22>
 800578a:	6862      	ldr	r2, [r4, #4]
 800578c:	42a3      	cmp	r3, r4
 800578e:	bf0c      	ite	eq
 8005790:	f8c8 2000 	streq.w	r2, [r8]
 8005794:	605a      	strne	r2, [r3, #4]
 8005796:	e7eb      	b.n	8005770 <_malloc_r+0xa8>
 8005798:	4623      	mov	r3, r4
 800579a:	6864      	ldr	r4, [r4, #4]
 800579c:	e7ae      	b.n	80056fc <_malloc_r+0x34>
 800579e:	463c      	mov	r4, r7
 80057a0:	687f      	ldr	r7, [r7, #4]
 80057a2:	e7b6      	b.n	8005712 <_malloc_r+0x4a>
 80057a4:	461a      	mov	r2, r3
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d1fb      	bne.n	80057a4 <_malloc_r+0xdc>
 80057ac:	2300      	movs	r3, #0
 80057ae:	6053      	str	r3, [r2, #4]
 80057b0:	e7de      	b.n	8005770 <_malloc_r+0xa8>
 80057b2:	230c      	movs	r3, #12
 80057b4:	6033      	str	r3, [r6, #0]
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f80c 	bl	80057d4 <__malloc_unlock>
 80057bc:	e794      	b.n	80056e8 <_malloc_r+0x20>
 80057be:	6005      	str	r5, [r0, #0]
 80057c0:	e7d6      	b.n	8005770 <_malloc_r+0xa8>
 80057c2:	bf00      	nop
 80057c4:	20000314 	.word	0x20000314

080057c8 <__malloc_lock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	@ (80057d0 <__malloc_lock+0x8>)
 80057ca:	f7ff bf0f 	b.w	80055ec <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	2000030c 	.word	0x2000030c

080057d4 <__malloc_unlock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__malloc_unlock+0x8>)
 80057d6:	f7ff bf0a 	b.w	80055ee <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	2000030c 	.word	0x2000030c

080057e0 <__ssputs_r>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	688e      	ldr	r6, [r1, #8]
 80057e6:	461f      	mov	r7, r3
 80057e8:	42be      	cmp	r6, r7
 80057ea:	680b      	ldr	r3, [r1, #0]
 80057ec:	4682      	mov	sl, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4690      	mov	r8, r2
 80057f2:	d82d      	bhi.n	8005850 <__ssputs_r+0x70>
 80057f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057fc:	d026      	beq.n	800584c <__ssputs_r+0x6c>
 80057fe:	6965      	ldr	r5, [r4, #20]
 8005800:	6909      	ldr	r1, [r1, #16]
 8005802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005806:	eba3 0901 	sub.w	r9, r3, r1
 800580a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800580e:	1c7b      	adds	r3, r7, #1
 8005810:	444b      	add	r3, r9
 8005812:	106d      	asrs	r5, r5, #1
 8005814:	429d      	cmp	r5, r3
 8005816:	bf38      	it	cc
 8005818:	461d      	movcc	r5, r3
 800581a:	0553      	lsls	r3, r2, #21
 800581c:	d527      	bpl.n	800586e <__ssputs_r+0x8e>
 800581e:	4629      	mov	r1, r5
 8005820:	f7ff ff52 	bl	80056c8 <_malloc_r>
 8005824:	4606      	mov	r6, r0
 8005826:	b360      	cbz	r0, 8005882 <__ssputs_r+0xa2>
 8005828:	6921      	ldr	r1, [r4, #16]
 800582a:	464a      	mov	r2, r9
 800582c:	f000 fae8 	bl	8005e00 <memcpy>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	6126      	str	r6, [r4, #16]
 800583e:	6165      	str	r5, [r4, #20]
 8005840:	444e      	add	r6, r9
 8005842:	eba5 0509 	sub.w	r5, r5, r9
 8005846:	6026      	str	r6, [r4, #0]
 8005848:	60a5      	str	r5, [r4, #8]
 800584a:	463e      	mov	r6, r7
 800584c:	42be      	cmp	r6, r7
 800584e:	d900      	bls.n	8005852 <__ssputs_r+0x72>
 8005850:	463e      	mov	r6, r7
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	4632      	mov	r2, r6
 8005856:	4641      	mov	r1, r8
 8005858:	f000 faa8 	bl	8005dac <memmove>
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	1b9b      	subs	r3, r3, r6
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	4433      	add	r3, r6
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	2000      	movs	r0, #0
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	462a      	mov	r2, r5
 8005870:	f000 fad4 	bl	8005e1c <_realloc_r>
 8005874:	4606      	mov	r6, r0
 8005876:	2800      	cmp	r0, #0
 8005878:	d1e0      	bne.n	800583c <__ssputs_r+0x5c>
 800587a:	6921      	ldr	r1, [r4, #16]
 800587c:	4650      	mov	r0, sl
 800587e:	f7ff feb7 	bl	80055f0 <_free_r>
 8005882:	230c      	movs	r3, #12
 8005884:	f8ca 3000 	str.w	r3, [sl]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e7e9      	b.n	800586a <__ssputs_r+0x8a>
	...

08005898 <_svfiprintf_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4698      	mov	r8, r3
 800589e:	898b      	ldrh	r3, [r1, #12]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	b09d      	sub	sp, #116	@ 0x74
 80058a4:	4607      	mov	r7, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	d510      	bpl.n	80058ce <_svfiprintf_r+0x36>
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	b973      	cbnz	r3, 80058ce <_svfiprintf_r+0x36>
 80058b0:	2140      	movs	r1, #64	@ 0x40
 80058b2:	f7ff ff09 	bl	80056c8 <_malloc_r>
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	6128      	str	r0, [r5, #16]
 80058ba:	b930      	cbnz	r0, 80058ca <_svfiprintf_r+0x32>
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	b01d      	add	sp, #116	@ 0x74
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	2340      	movs	r3, #64	@ 0x40
 80058cc:	616b      	str	r3, [r5, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d2:	2320      	movs	r3, #32
 80058d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058dc:	2330      	movs	r3, #48	@ 0x30
 80058de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a7c <_svfiprintf_r+0x1e4>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058e6:	f04f 0901 	mov.w	r9, #1
 80058ea:	4623      	mov	r3, r4
 80058ec:	469a      	mov	sl, r3
 80058ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f2:	b10a      	cbz	r2, 80058f8 <_svfiprintf_r+0x60>
 80058f4:	2a25      	cmp	r2, #37	@ 0x25
 80058f6:	d1f9      	bne.n	80058ec <_svfiprintf_r+0x54>
 80058f8:	ebba 0b04 	subs.w	fp, sl, r4
 80058fc:	d00b      	beq.n	8005916 <_svfiprintf_r+0x7e>
 80058fe:	465b      	mov	r3, fp
 8005900:	4622      	mov	r2, r4
 8005902:	4629      	mov	r1, r5
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ff6b 	bl	80057e0 <__ssputs_r>
 800590a:	3001      	adds	r0, #1
 800590c:	f000 80a7 	beq.w	8005a5e <_svfiprintf_r+0x1c6>
 8005910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005912:	445a      	add	r2, fp
 8005914:	9209      	str	r2, [sp, #36]	@ 0x24
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 809f 	beq.w	8005a5e <_svfiprintf_r+0x1c6>
 8005920:	2300      	movs	r3, #0
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592a:	f10a 0a01 	add.w	sl, sl, #1
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	9307      	str	r3, [sp, #28]
 8005932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005936:	931a      	str	r3, [sp, #104]	@ 0x68
 8005938:	4654      	mov	r4, sl
 800593a:	2205      	movs	r2, #5
 800593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005940:	484e      	ldr	r0, [pc, #312]	@ (8005a7c <_svfiprintf_r+0x1e4>)
 8005942:	f7fa fc4d 	bl	80001e0 <memchr>
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	b9d8      	cbnz	r0, 8005982 <_svfiprintf_r+0xea>
 800594a:	06d0      	lsls	r0, r2, #27
 800594c:	bf44      	itt	mi
 800594e:	2320      	movmi	r3, #32
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005954:	0711      	lsls	r1, r2, #28
 8005956:	bf44      	itt	mi
 8005958:	232b      	movmi	r3, #43	@ 0x2b
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800595e:	f89a 3000 	ldrb.w	r3, [sl]
 8005962:	2b2a      	cmp	r3, #42	@ 0x2a
 8005964:	d015      	beq.n	8005992 <_svfiprintf_r+0xfa>
 8005966:	9a07      	ldr	r2, [sp, #28]
 8005968:	4654      	mov	r4, sl
 800596a:	2000      	movs	r0, #0
 800596c:	f04f 0c0a 	mov.w	ip, #10
 8005970:	4621      	mov	r1, r4
 8005972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005976:	3b30      	subs	r3, #48	@ 0x30
 8005978:	2b09      	cmp	r3, #9
 800597a:	d94b      	bls.n	8005a14 <_svfiprintf_r+0x17c>
 800597c:	b1b0      	cbz	r0, 80059ac <_svfiprintf_r+0x114>
 800597e:	9207      	str	r2, [sp, #28]
 8005980:	e014      	b.n	80059ac <_svfiprintf_r+0x114>
 8005982:	eba0 0308 	sub.w	r3, r0, r8
 8005986:	fa09 f303 	lsl.w	r3, r9, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	46a2      	mov	sl, r4
 8005990:	e7d2      	b.n	8005938 <_svfiprintf_r+0xa0>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	1d19      	adds	r1, r3, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	9103      	str	r1, [sp, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfbb      	ittet	lt
 800599e:	425b      	neglt	r3, r3
 80059a0:	f042 0202 	orrlt.w	r2, r2, #2
 80059a4:	9307      	strge	r3, [sp, #28]
 80059a6:	9307      	strlt	r3, [sp, #28]
 80059a8:	bfb8      	it	lt
 80059aa:	9204      	strlt	r2, [sp, #16]
 80059ac:	7823      	ldrb	r3, [r4, #0]
 80059ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b0:	d10a      	bne.n	80059c8 <_svfiprintf_r+0x130>
 80059b2:	7863      	ldrb	r3, [r4, #1]
 80059b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b6:	d132      	bne.n	8005a1e <_svfiprintf_r+0x186>
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059c4:	3402      	adds	r4, #2
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a8c <_svfiprintf_r+0x1f4>
 80059cc:	7821      	ldrb	r1, [r4, #0]
 80059ce:	2203      	movs	r2, #3
 80059d0:	4650      	mov	r0, sl
 80059d2:	f7fa fc05 	bl	80001e0 <memchr>
 80059d6:	b138      	cbz	r0, 80059e8 <_svfiprintf_r+0x150>
 80059d8:	9b04      	ldr	r3, [sp, #16]
 80059da:	eba0 000a 	sub.w	r0, r0, sl
 80059de:	2240      	movs	r2, #64	@ 0x40
 80059e0:	4082      	lsls	r2, r0
 80059e2:	4313      	orrs	r3, r2
 80059e4:	3401      	adds	r4, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ec:	4824      	ldr	r0, [pc, #144]	@ (8005a80 <_svfiprintf_r+0x1e8>)
 80059ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059f2:	2206      	movs	r2, #6
 80059f4:	f7fa fbf4 	bl	80001e0 <memchr>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d036      	beq.n	8005a6a <_svfiprintf_r+0x1d2>
 80059fc:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <_svfiprintf_r+0x1ec>)
 80059fe:	bb1b      	cbnz	r3, 8005a48 <_svfiprintf_r+0x1b0>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	3307      	adds	r3, #7
 8005a04:	f023 0307 	bic.w	r3, r3, #7
 8005a08:	3308      	adds	r3, #8
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0e:	4433      	add	r3, r6
 8005a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a12:	e76a      	b.n	80058ea <_svfiprintf_r+0x52>
 8005a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a18:	460c      	mov	r4, r1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	e7a8      	b.n	8005970 <_svfiprintf_r+0xd8>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	3401      	adds	r4, #1
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	4619      	mov	r1, r3
 8005a26:	f04f 0c0a 	mov.w	ip, #10
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a30:	3a30      	subs	r2, #48	@ 0x30
 8005a32:	2a09      	cmp	r2, #9
 8005a34:	d903      	bls.n	8005a3e <_svfiprintf_r+0x1a6>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0c6      	beq.n	80059c8 <_svfiprintf_r+0x130>
 8005a3a:	9105      	str	r1, [sp, #20]
 8005a3c:	e7c4      	b.n	80059c8 <_svfiprintf_r+0x130>
 8005a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a42:	4604      	mov	r4, r0
 8005a44:	2301      	movs	r3, #1
 8005a46:	e7f0      	b.n	8005a2a <_svfiprintf_r+0x192>
 8005a48:	ab03      	add	r3, sp, #12
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a88 <_svfiprintf_r+0x1f0>)
 8005a50:	a904      	add	r1, sp, #16
 8005a52:	4638      	mov	r0, r7
 8005a54:	f3af 8000 	nop.w
 8005a58:	1c42      	adds	r2, r0, #1
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	d1d6      	bne.n	8005a0c <_svfiprintf_r+0x174>
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	065b      	lsls	r3, r3, #25
 8005a62:	f53f af2d 	bmi.w	80058c0 <_svfiprintf_r+0x28>
 8005a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a68:	e72c      	b.n	80058c4 <_svfiprintf_r+0x2c>
 8005a6a:	ab03      	add	r3, sp, #12
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	462a      	mov	r2, r5
 8005a70:	4b05      	ldr	r3, [pc, #20]	@ (8005a88 <_svfiprintf_r+0x1f0>)
 8005a72:	a904      	add	r1, sp, #16
 8005a74:	4638      	mov	r0, r7
 8005a76:	f000 f879 	bl	8005b6c <_printf_i>
 8005a7a:	e7ed      	b.n	8005a58 <_svfiprintf_r+0x1c0>
 8005a7c:	08005f34 	.word	0x08005f34
 8005a80:	08005f3e 	.word	0x08005f3e
 8005a84:	00000000 	.word	0x00000000
 8005a88:	080057e1 	.word	0x080057e1
 8005a8c:	08005f3a 	.word	0x08005f3a

08005a90 <_printf_common>:
 8005a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	4616      	mov	r6, r2
 8005a96:	4698      	mov	r8, r3
 8005a98:	688a      	ldr	r2, [r1, #8]
 8005a9a:	690b      	ldr	r3, [r1, #16]
 8005a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	bfb8      	it	lt
 8005aa4:	4613      	movlt	r3, r2
 8005aa6:	6033      	str	r3, [r6, #0]
 8005aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aac:	4607      	mov	r7, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	b10a      	cbz	r2, 8005ab6 <_printf_common+0x26>
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	0699      	lsls	r1, r3, #26
 8005aba:	bf42      	ittt	mi
 8005abc:	6833      	ldrmi	r3, [r6, #0]
 8005abe:	3302      	addmi	r3, #2
 8005ac0:	6033      	strmi	r3, [r6, #0]
 8005ac2:	6825      	ldr	r5, [r4, #0]
 8005ac4:	f015 0506 	ands.w	r5, r5, #6
 8005ac8:	d106      	bne.n	8005ad8 <_printf_common+0x48>
 8005aca:	f104 0a19 	add.w	sl, r4, #25
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	6832      	ldr	r2, [r6, #0]
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	dc26      	bgt.n	8005b26 <_printf_common+0x96>
 8005ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	3b00      	subs	r3, #0
 8005ae0:	bf18      	it	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	0692      	lsls	r2, r2, #26
 8005ae6:	d42b      	bmi.n	8005b40 <_printf_common+0xb0>
 8005ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aec:	4641      	mov	r1, r8
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c8      	blx	r9
 8005af2:	3001      	adds	r0, #1
 8005af4:	d01e      	beq.n	8005b34 <_printf_common+0xa4>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	6922      	ldr	r2, [r4, #16]
 8005afa:	f003 0306 	and.w	r3, r3, #6
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	bf02      	ittt	eq
 8005b02:	68e5      	ldreq	r5, [r4, #12]
 8005b04:	6833      	ldreq	r3, [r6, #0]
 8005b06:	1aed      	subeq	r5, r5, r3
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	bf0c      	ite	eq
 8005b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b10:	2500      	movne	r5, #0
 8005b12:	4293      	cmp	r3, r2
 8005b14:	bfc4      	itt	gt
 8005b16:	1a9b      	subgt	r3, r3, r2
 8005b18:	18ed      	addgt	r5, r5, r3
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	341a      	adds	r4, #26
 8005b1e:	42b5      	cmp	r5, r6
 8005b20:	d11a      	bne.n	8005b58 <_printf_common+0xc8>
 8005b22:	2000      	movs	r0, #0
 8005b24:	e008      	b.n	8005b38 <_printf_common+0xa8>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4652      	mov	r2, sl
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	47c8      	blx	r9
 8005b30:	3001      	adds	r0, #1
 8005b32:	d103      	bne.n	8005b3c <_printf_common+0xac>
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	e7c6      	b.n	8005ace <_printf_common+0x3e>
 8005b40:	18e1      	adds	r1, r4, r3
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	2030      	movs	r0, #48	@ 0x30
 8005b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b4a:	4422      	add	r2, r4
 8005b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b54:	3302      	adds	r3, #2
 8005b56:	e7c7      	b.n	8005ae8 <_printf_common+0x58>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	4638      	mov	r0, r7
 8005b60:	47c8      	blx	r9
 8005b62:	3001      	adds	r0, #1
 8005b64:	d0e6      	beq.n	8005b34 <_printf_common+0xa4>
 8005b66:	3601      	adds	r6, #1
 8005b68:	e7d9      	b.n	8005b1e <_printf_common+0x8e>
	...

08005b6c <_printf_i>:
 8005b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	7e0f      	ldrb	r7, [r1, #24]
 8005b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b74:	2f78      	cmp	r7, #120	@ 0x78
 8005b76:	4691      	mov	r9, r2
 8005b78:	4680      	mov	r8, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	469a      	mov	sl, r3
 8005b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b82:	d807      	bhi.n	8005b94 <_printf_i+0x28>
 8005b84:	2f62      	cmp	r7, #98	@ 0x62
 8005b86:	d80a      	bhi.n	8005b9e <_printf_i+0x32>
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	f000 80d2 	beq.w	8005d32 <_printf_i+0x1c6>
 8005b8e:	2f58      	cmp	r7, #88	@ 0x58
 8005b90:	f000 80b9 	beq.w	8005d06 <_printf_i+0x19a>
 8005b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b9c:	e03a      	b.n	8005c14 <_printf_i+0xa8>
 8005b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ba2:	2b15      	cmp	r3, #21
 8005ba4:	d8f6      	bhi.n	8005b94 <_printf_i+0x28>
 8005ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8005bac <_printf_i+0x40>)
 8005ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c19 	.word	0x08005c19
 8005bb4:	08005b95 	.word	0x08005b95
 8005bb8:	08005b95 	.word	0x08005b95
 8005bbc:	08005b95 	.word	0x08005b95
 8005bc0:	08005b95 	.word	0x08005b95
 8005bc4:	08005c19 	.word	0x08005c19
 8005bc8:	08005b95 	.word	0x08005b95
 8005bcc:	08005b95 	.word	0x08005b95
 8005bd0:	08005b95 	.word	0x08005b95
 8005bd4:	08005b95 	.word	0x08005b95
 8005bd8:	08005d19 	.word	0x08005d19
 8005bdc:	08005c43 	.word	0x08005c43
 8005be0:	08005cd3 	.word	0x08005cd3
 8005be4:	08005b95 	.word	0x08005b95
 8005be8:	08005b95 	.word	0x08005b95
 8005bec:	08005d3b 	.word	0x08005d3b
 8005bf0:	08005b95 	.word	0x08005b95
 8005bf4:	08005c43 	.word	0x08005c43
 8005bf8:	08005b95 	.word	0x08005b95
 8005bfc:	08005b95 	.word	0x08005b95
 8005c00:	08005cdb 	.word	0x08005cdb
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	1d1a      	adds	r2, r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6032      	str	r2, [r6, #0]
 8005c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c14:	2301      	movs	r3, #1
 8005c16:	e09d      	b.n	8005d54 <_printf_i+0x1e8>
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	1d19      	adds	r1, r3, #4
 8005c1e:	6031      	str	r1, [r6, #0]
 8005c20:	0606      	lsls	r6, r0, #24
 8005c22:	d501      	bpl.n	8005c28 <_printf_i+0xbc>
 8005c24:	681d      	ldr	r5, [r3, #0]
 8005c26:	e003      	b.n	8005c30 <_printf_i+0xc4>
 8005c28:	0645      	lsls	r5, r0, #25
 8005c2a:	d5fb      	bpl.n	8005c24 <_printf_i+0xb8>
 8005c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c30:	2d00      	cmp	r5, #0
 8005c32:	da03      	bge.n	8005c3c <_printf_i+0xd0>
 8005c34:	232d      	movs	r3, #45	@ 0x2d
 8005c36:	426d      	negs	r5, r5
 8005c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c3c:	4859      	ldr	r0, [pc, #356]	@ (8005da4 <_printf_i+0x238>)
 8005c3e:	230a      	movs	r3, #10
 8005c40:	e011      	b.n	8005c66 <_printf_i+0xfa>
 8005c42:	6821      	ldr	r1, [r4, #0]
 8005c44:	6833      	ldr	r3, [r6, #0]
 8005c46:	0608      	lsls	r0, r1, #24
 8005c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c4c:	d402      	bmi.n	8005c54 <_printf_i+0xe8>
 8005c4e:	0649      	lsls	r1, r1, #25
 8005c50:	bf48      	it	mi
 8005c52:	b2ad      	uxthmi	r5, r5
 8005c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c56:	4853      	ldr	r0, [pc, #332]	@ (8005da4 <_printf_i+0x238>)
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	bf14      	ite	ne
 8005c5c:	230a      	movne	r3, #10
 8005c5e:	2308      	moveq	r3, #8
 8005c60:	2100      	movs	r1, #0
 8005c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c66:	6866      	ldr	r6, [r4, #4]
 8005c68:	60a6      	str	r6, [r4, #8]
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	bfa2      	ittt	ge
 8005c6e:	6821      	ldrge	r1, [r4, #0]
 8005c70:	f021 0104 	bicge.w	r1, r1, #4
 8005c74:	6021      	strge	r1, [r4, #0]
 8005c76:	b90d      	cbnz	r5, 8005c7c <_printf_i+0x110>
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	d04b      	beq.n	8005d14 <_printf_i+0x1a8>
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c82:	fb03 5711 	mls	r7, r3, r1, r5
 8005c86:	5dc7      	ldrb	r7, [r0, r7]
 8005c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c8c:	462f      	mov	r7, r5
 8005c8e:	42bb      	cmp	r3, r7
 8005c90:	460d      	mov	r5, r1
 8005c92:	d9f4      	bls.n	8005c7e <_printf_i+0x112>
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d10b      	bne.n	8005cb0 <_printf_i+0x144>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07df      	lsls	r7, r3, #31
 8005c9c:	d508      	bpl.n	8005cb0 <_printf_i+0x144>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	6861      	ldr	r1, [r4, #4]
 8005ca2:	4299      	cmp	r1, r3
 8005ca4:	bfde      	ittt	le
 8005ca6:	2330      	movle	r3, #48	@ 0x30
 8005ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cb0:	1b92      	subs	r2, r2, r6
 8005cb2:	6122      	str	r2, [r4, #16]
 8005cb4:	f8cd a000 	str.w	sl, [sp]
 8005cb8:	464b      	mov	r3, r9
 8005cba:	aa03      	add	r2, sp, #12
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff fee6 	bl	8005a90 <_printf_common>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d14a      	bne.n	8005d5e <_printf_i+0x1f2>
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	b004      	add	sp, #16
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	f043 0320 	orr.w	r3, r3, #32
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	4833      	ldr	r0, [pc, #204]	@ (8005da8 <_printf_i+0x23c>)
 8005cdc:	2778      	movs	r7, #120	@ 0x78
 8005cde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6831      	ldr	r1, [r6, #0]
 8005ce6:	061f      	lsls	r7, r3, #24
 8005ce8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cec:	d402      	bmi.n	8005cf4 <_printf_i+0x188>
 8005cee:	065f      	lsls	r7, r3, #25
 8005cf0:	bf48      	it	mi
 8005cf2:	b2ad      	uxthmi	r5, r5
 8005cf4:	6031      	str	r1, [r6, #0]
 8005cf6:	07d9      	lsls	r1, r3, #31
 8005cf8:	bf44      	itt	mi
 8005cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8005cfe:	6023      	strmi	r3, [r4, #0]
 8005d00:	b11d      	cbz	r5, 8005d0a <_printf_i+0x19e>
 8005d02:	2310      	movs	r3, #16
 8005d04:	e7ac      	b.n	8005c60 <_printf_i+0xf4>
 8005d06:	4827      	ldr	r0, [pc, #156]	@ (8005da4 <_printf_i+0x238>)
 8005d08:	e7e9      	b.n	8005cde <_printf_i+0x172>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f023 0320 	bic.w	r3, r3, #32
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	e7f6      	b.n	8005d02 <_printf_i+0x196>
 8005d14:	4616      	mov	r6, r2
 8005d16:	e7bd      	b.n	8005c94 <_printf_i+0x128>
 8005d18:	6833      	ldr	r3, [r6, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	6961      	ldr	r1, [r4, #20]
 8005d1e:	1d18      	adds	r0, r3, #4
 8005d20:	6030      	str	r0, [r6, #0]
 8005d22:	062e      	lsls	r6, r5, #24
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0x1c0>
 8005d28:	6019      	str	r1, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0x1c6>
 8005d2c:	0668      	lsls	r0, r5, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0x1bc>
 8005d30:	8019      	strh	r1, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	4616      	mov	r6, r2
 8005d38:	e7bc      	b.n	8005cb4 <_printf_i+0x148>
 8005d3a:	6833      	ldr	r3, [r6, #0]
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	6032      	str	r2, [r6, #0]
 8005d40:	681e      	ldr	r6, [r3, #0]
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7fa fa4a 	bl	80001e0 <memchr>
 8005d4c:	b108      	cbz	r0, 8005d52 <_printf_i+0x1e6>
 8005d4e:	1b80      	subs	r0, r0, r6
 8005d50:	6060      	str	r0, [r4, #4]
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2300      	movs	r3, #0
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d5c:	e7aa      	b.n	8005cb4 <_printf_i+0x148>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	4632      	mov	r2, r6
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0ad      	beq.n	8005cc8 <_printf_i+0x15c>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d413      	bmi.n	8005d9a <_printf_i+0x22e>
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bfb8      	it	lt
 8005d7a:	4618      	movlt	r0, r3
 8005d7c:	e7a6      	b.n	8005ccc <_printf_i+0x160>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4632      	mov	r2, r6
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d09d      	beq.n	8005cc8 <_printf_i+0x15c>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	9903      	ldr	r1, [sp, #12]
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dcf2      	bgt.n	8005d7e <_printf_i+0x212>
 8005d98:	e7eb      	b.n	8005d72 <_printf_i+0x206>
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	f104 0619 	add.w	r6, r4, #25
 8005da0:	e7f5      	b.n	8005d8e <_printf_i+0x222>
 8005da2:	bf00      	nop
 8005da4:	08005f45 	.word	0x08005f45
 8005da8:	08005f56 	.word	0x08005f56

08005dac <memmove>:
 8005dac:	4288      	cmp	r0, r1
 8005dae:	b510      	push	{r4, lr}
 8005db0:	eb01 0402 	add.w	r4, r1, r2
 8005db4:	d902      	bls.n	8005dbc <memmove+0x10>
 8005db6:	4284      	cmp	r4, r0
 8005db8:	4623      	mov	r3, r4
 8005dba:	d807      	bhi.n	8005dcc <memmove+0x20>
 8005dbc:	1e43      	subs	r3, r0, #1
 8005dbe:	42a1      	cmp	r1, r4
 8005dc0:	d008      	beq.n	8005dd4 <memmove+0x28>
 8005dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dca:	e7f8      	b.n	8005dbe <memmove+0x12>
 8005dcc:	4402      	add	r2, r0
 8005dce:	4601      	mov	r1, r0
 8005dd0:	428a      	cmp	r2, r1
 8005dd2:	d100      	bne.n	8005dd6 <memmove+0x2a>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dde:	e7f7      	b.n	8005dd0 <memmove+0x24>

08005de0 <_sbrk_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	@ (8005dfc <_sbrk_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fa fff2 	bl	8000dd4 <_sbrk>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_sbrk_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_sbrk_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000308 	.word	0x20000308

08005e00 <memcpy>:
 8005e00:	440a      	add	r2, r1
 8005e02:	4291      	cmp	r1, r2
 8005e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e08:	d100      	bne.n	8005e0c <memcpy+0xc>
 8005e0a:	4770      	bx	lr
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e16:	4291      	cmp	r1, r2
 8005e18:	d1f9      	bne.n	8005e0e <memcpy+0xe>
 8005e1a:	bd10      	pop	{r4, pc}

08005e1c <_realloc_r>:
 8005e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e20:	4680      	mov	r8, r0
 8005e22:	4615      	mov	r5, r2
 8005e24:	460c      	mov	r4, r1
 8005e26:	b921      	cbnz	r1, 8005e32 <_realloc_r+0x16>
 8005e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	f7ff bc4b 	b.w	80056c8 <_malloc_r>
 8005e32:	b92a      	cbnz	r2, 8005e40 <_realloc_r+0x24>
 8005e34:	f7ff fbdc 	bl	80055f0 <_free_r>
 8005e38:	2400      	movs	r4, #0
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e40:	f000 f81a 	bl	8005e78 <_malloc_usable_size_r>
 8005e44:	4285      	cmp	r5, r0
 8005e46:	4606      	mov	r6, r0
 8005e48:	d802      	bhi.n	8005e50 <_realloc_r+0x34>
 8005e4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e4e:	d8f4      	bhi.n	8005e3a <_realloc_r+0x1e>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7ff fc38 	bl	80056c8 <_malloc_r>
 8005e58:	4607      	mov	r7, r0
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d0ec      	beq.n	8005e38 <_realloc_r+0x1c>
 8005e5e:	42b5      	cmp	r5, r6
 8005e60:	462a      	mov	r2, r5
 8005e62:	4621      	mov	r1, r4
 8005e64:	bf28      	it	cs
 8005e66:	4632      	movcs	r2, r6
 8005e68:	f7ff ffca 	bl	8005e00 <memcpy>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7ff fbbe 	bl	80055f0 <_free_r>
 8005e74:	463c      	mov	r4, r7
 8005e76:	e7e0      	b.n	8005e3a <_realloc_r+0x1e>

08005e78 <_malloc_usable_size_r>:
 8005e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7c:	1f18      	subs	r0, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bfbc      	itt	lt
 8005e82:	580b      	ldrlt	r3, [r1, r0]
 8005e84:	18c0      	addlt	r0, r0, r3
 8005e86:	4770      	bx	lr

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
